#+title: Venkatesh Choppella Emacs configuration
#+AUTHOR:    Venkatesh Choppella
#+EMAIL:     venkatesh.choppella@iiit.ac.in
#+DATE:      [2015-09-07 Mon]
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: tangle init.el
#+PROPERTY: eval no
#+PROPERTY: exports code

* Introduction

These pages capture my emacs configuration.  

The main objective of this project is to make my emacs
configuration completely portable: 

  - 1. Clone git repository :: =git clone https://gitlab.com/vxcg/prj/emacs/emacs.git

  - 2. Make the  =init.el= file :: =make -k all=

  - 3. Launch emacs ::  =emacs -q -l /path/to/init.el=.

* Emacs version and set up of emacs directories
I am using emacs version
#+BEGIN_SRC emacs-lisp :eval t :results value :exports both :tangle no
(version)
#+END_SRC

#+RESULTS:
: GNU Emacs 25.2.2 (x86_64-pc-linux-gnu, GTK+ Version 3.10.8)
:  of 2017-05-06

** Key directories and files

The installation makes no changes to the default user emacs
directory stored in the variable =user-emacs-directory=.

However, as a result of running this file, the elpa
directory may be populated by the packages identified by the
variable 

* Preamble of =init.el=
The banner prints the name of the full path of the =init.el=
file. 
*** Banner
#+BEGIN_SRC emacs-lisp 
;;; Emacs lisp configuration
;;; Venkatesh Choppella
;;; <venkatesh.choppella@iiit.ac.in>
;;; gitlab: @vxc

(defmacro rval (var)
  "Return the value of symbol VAR if it is bound, else nil."
  `(and (boundp (quote ,var)) ,var))

(message "start evaluating init file")

;;; version of emacs running
(message "emacs-version = %s" (version))

;;; load-file-name is the name of the file loaded with the -l option.
(message "load-file-name = %s" load-file-name)

;;; default-directory is where emacs is launched from.
(message "default-directory = %s" default-directory)

;;; user-emacs-dir is bound to the value set at command line, 
;;; unbound otherwise
(message "user-emacs-dir = %s" (rval user-emacs-dir))

;;; expanded-user-emacs-dir-or-nil is the expanded user-emacs-dir
;;; if user-emacs-dir is bound, nil otherwise.

(setq expanded-user-emacs-dir-or-nil
	  (and (rval user-emacs-dir)
		   (expand-file-name (file-name-as-directory user-emacs-dir))))
(message "expanded-user-emacs-dir-or-nil = %s" expanded-user-emacs-dir-or-nil)

;;; user-emacs-directory is where the user emacs customizations sit.
;;; E.g., init.el will sit here.

;;; user-emacs-directory is now either
;;; the expanded user emacs dir, or if that is nil
;;; the directory of the file loaded from emacs command line.
(setq user-emacs-directory
	  (or expanded-user-emacs-dir-or-nil
		  (file-name-directory load-file-name)))

(message "user-emacs-directory = %s" user-emacs-directory)

(require 'package)

;;; package-user-dir is the directory where user downloaded packages
;;; are installed.

;;; 'package sets is to the elpa subdirectory of the
;;; user-emacs-directory.

(message "package-user-dir = %s" package-user-dir)

;;; Canonicalise the directory to a fully expanded name.

(setq package-user-dir
	  (file-name-as-directory
	   (concat user-emacs-directory "elpa")))

(message "canonicalised package-user-dir = %s" package-user-dir)

;;; package-directory-list is the list of directories searched for
;;; packages. 
;;; Its value is set by 'package

(message "package-directory-list = %s" package-directory-list)
(message "load-path = %s" load-path)
#+END_SRC

** Required standard libraries

A standard library is one that comes with the standard emacs
distribution.

#+BEGIN_SRC emacs-lisp
(require 'cl)
;; (require 'pathname)
(require 'comint)
#+END_SRC

* Package management
Packages are managed by setting the proxies, archive
locations and initialization.  The list of selected packages
are then installed in the =elpa= directories under
=user-emacs-directory=.
** Proxies
#+begin_src emacs-lisp
(setq url-proxy-services 
   '(("http"  . "proxy.iiit.ac.in:8080")
     ("https" . "proxy.iiit.ac.in:8080")))
#+end_src
** Package archives and initialization
#+BEGIN_SRC emacs-lisp
;;; Package management
(require 'package)
;;; default value
;;; (("gnu" . "http://elpa.gnu.org/packages/"))

(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives 
	     '("org" . "http://orgmode.org/elpa/") t)
(package-initialize)
#+END_SRC

** List of packages selected for installation
These packages 
#+BEGIN_SRC emacs-lisp
(setq package-selected-packages 
	  (append 
	  '(alert
		async
		bbdb
		biblio
		biblio-core
		calfw-gcal
		dash
		dash-functional
		deferred
		edit-server
		edit-server-htmlize
		f
		faceup
		git-commit-mode
		git-rebase-mode
		gntp
		ham-mode
		helm
		helm-bibtex
		helm-core
		html-to-markdown
		hydra
		ivy
		js2-mode
		js3-mode
		js-comint
		key-chord
		log4e
		magit
		markdown-mode
		nodejs-repl
		nvm
		openwith
		org
		org-gcal
		org-journal
		org-tree-slide
		ox-reveal
		parsebib
		pdf-tools
		popup
		racket-mode
		request
		request-deferred
		s
		smex
		tablist
		tern
		web-mode
		)
	  package-selected-packages
	  ))
#+END_SRC

** Install selected packages

The selected packages are installed under the =elpa=
sub-directory of =user-emacs-directory=.

#+BEGIN_SRC emacs-lisp
(package-install-selected-packages)
#+END_SRC

* Setting =load-path=
The =load-path= variable is set to a very conservative list
of directories.  

The directories are specified relative to =root-path=.
These 


The directories selected from =custom=,
=git= and =others= are /added/ (to the front) of =load-path=.

** =root-path=

=root-path= acquires its value in one of two ways:
 
 - Explicit loading of emacs =init.el= :: When the =init.el=
      file is loaded explicitly via =emacs -l init.el=, then
      =root-path= is equal to the full pathname of
      =init.el=.

 - Default directory :: This is the directory containing the
      =init.el= file.  

#+BEGIN_SRC emacs-lisp
(defvar root-path (or load-file-name default-directory))
#+END_SRC
** setting =load-path=
#+BEGIN_SRC emacs-lisp
;; Load Path
;; ---------
;;; (list-of pathname?) -> void?
(defun add-to-load-path (entries)
  (dolist (entry entries)
	 (add-to-list 'load-path 
				  (expand-file-name 
				   entry
				   (file-name-directory root-path)))))

(add-to-load-path
'(
      "custom"
	  "custom/dired"
	  "custom/faces"
	  "custom/misc"
      "custom/org-mode"
      "custom/org-mode/contrib/ox-bibtex"
      "custom/racket"
	  "custom/shell"
      "git/org-ref"
	  "other/org-8.3.4/lisp"
	  "other/org-8.3.4/contrib"
	  "other/pathname"))

;;        tweaked 8.3.1 so that it has a  file symlinked to 7.9.2
;;        TODO: clean this up!


;;; removes references to default org-mode installation
;;; made by the emacs distributions.  Then removes
;;; duplicates

;; (setq load-path 
;;       (delete-dups 
;;        (remove-if '(lambda (dirname) 
;; 		     (string-match "site-lisp/org-mode" dirname)) 
;;		  load-path)))

#+END_SRC

** Current value of =load-path=
The current value of load path is given below

#+BEGIN_SRC emacs-lisp :eval t :results value :exports both
;;; pretty print the load-path, one directory per line
(defun pprint-load-path ()
   (mapconcat 'identity load-path  "\n"))
(pprint-load-path)
#+END_SRC
#+RESULTS:
#+begin_example
/home/choppell/venk/work/new/prj/emacs/src/org/other/org-8.3.4/contrib
/home/choppell/venk/work/new/prj/emacs/src/org/other/org-8.3.4/lisp
/home/choppell/venk/work/new/prj/emacs/src/org/git/org-ref
/home/choppell/venk/work/new/prj/emacs/src/org/custom/shell
/home/choppell/venk/work/new/prj/emacs/src/org/custom/racket
/home/choppell/venk/work/new/prj/emacs/src/org/custom/org-mode/contrib/ox-bibtex
/home/choppell/venk/work/new/prj/emacs/src/org/custom/org-mode
/home/choppell/venk/work/new/prj/emacs/src/org/custom/misc
/home/choppell/venk/work/new/prj/emacs/src/org/custom/faces
/home/choppell/venk/work/new/prj/emacs/src/org/custom/dired
/home/choppell/venk/work/new/prj/emacs/src/org/custom
/home/choppell/emacs/git/org-ref/citeproc/csl
/home/choppell/emacs/git/org-ref/citeproc
~/emacs/custom/org-tree-slide
~/emacs/custom/shell
~/emacs/custom/org-mode/contrib/journal
~/emacs/custom/org-mode
~/emacs/custom/racket
~/emacs/custom/misc
~/emacs/custom/keys
~/emacs/custom/js
~/emacs/custom/faces
~/emacs/custom/dired
~/emacs/packages/other/alloy-mode
~/emacs/packages/other/pathname
~/emacs/git/org-ref
/home/choppell/.emacs.d/elpa/bbdb-20151114.1541
/home/choppell/.emacs.d/elpa/calfw-gcal-20120111.200
/home/choppell/.emacs.d/elpa/edit-server-htmlize-20130329.1548
/home/choppell/.emacs.d/elpa/edit-server-20141231.1358
/home/choppell/.emacs.d/elpa/ham-mode-20150811.606
/home/choppell/.emacs.d/elpa/helm-bibtex-20170808.1124
/home/choppell/.emacs.d/elpa/biblio-20161014.1604
/home/choppell/.emacs.d/elpa/biblio-core-20160901.1115
/home/choppell/.emacs.d/elpa/helm-20170827.134
/home/choppell/.emacs.d/elpa/helm-core-20170821.2134
/home/choppell/.emacs.d/elpa/async-20170823.2116
/home/choppell/.emacs.d/elpa/html-to-markdown-20151105.40
/home/choppell/.emacs.d/elpa/hydra-20170813.1058
/home/choppell/.emacs.d/elpa/ivy-20170817.1000
/home/choppell/.emacs.d/elpa/js-comint-20161212.2125
/home/choppell/.emacs.d/elpa/js2-mode-20170116.733
/home/choppell/.emacs.d/elpa/js3-mode-20160515.850
/home/choppell/.emacs.d/elpa/key-chord-20160227.438
/home/choppell/.emacs.d/elpa/magit-20150124.930
/home/choppell/.emacs.d/elpa/git-rebase-mode-20150122.1114
/home/choppell/.emacs.d/elpa/git-commit-mode-20141014.1634
/home/choppell/.emacs.d/elpa/markdown-mode-20161222.1416
/home/choppell/.emacs.d/elpa/nodejs-repl-20170110.940
/home/choppell/.emacs.d/elpa/nvm-20151113.55
/home/choppell/.emacs.d/elpa/dash-functional-20160615.1351
/home/choppell/.emacs.d/elpa/f-20151113.123
/home/choppell/.emacs.d/elpa/dash-20160223.1028
/home/choppell/.emacs.d/elpa/openwith-20120531.1436
/home/choppell/.emacs.d/elpa/org-gcal-20170420.1401
/home/choppell/.emacs.d/elpa/alert-20170824.1140
/home/choppell/.emacs.d/elpa/log4e-20170401.604
/home/choppell/.emacs.d/elpa/gntp-20141024.1950
/home/choppell/.emacs.d/elpa/org-journal-20151228.603
/home/choppell/.emacs.d/elpa/ox-reveal-20160224.1819
/home/choppell/.emacs.d/elpa/org-20160222
/home/choppell/.emacs.d/elpa/parsebib-20170501.347
/home/choppell/.emacs.d/elpa/pdf-tools-20170820.1117
/home/choppell/.emacs.d/elpa/popup-20160709.729
/home/choppell/.emacs.d/elpa/racket-mode-20150807.1730
/home/choppell/.emacs.d/elpa/faceup-20150215.1348
/home/choppell/.emacs.d/elpa/request-deferred-20160419.1605
/home/choppell/.emacs.d/elpa/request-20170131.1747
/home/choppell/.emacs.d/elpa/deferred-20170531.2135
/home/choppell/.emacs.d/elpa/s-20140910.334
/home/choppell/.emacs.d/elpa/smex-20151212.1409
/home/choppell/.emacs.d/elpa/tablist-20170219.1935
/home/choppell/.emacs.d/elpa/tern-20161222.850
/home/choppell/.emacs.d/elpa/web-mode-20150722.12
/usr/share/emacs/25.2/site-lisp
/usr/share/emacs/site-lisp
/usr/share/emacs/site-lisp/apel
/usr/share/emacs/site-lisp/autoconf
/usr/share/emacs/site-lisp/coq
/usr/share/emacs/site-lisp/dictionaries-common
/usr/share/emacs/site-lisp/doxymacs
/usr/share/emacs/site-lisp/elscreen
/usr/share/emacs/site-lisp/emacs-mozc
/usr/share/emacs/site-lisp/haskell-mode
/usr/share/emacs/site-lisp/latex-cjk-common
/usr/share/emacs/site-lisp/latex-cjk-thai
/usr/share/emacs/site-lisp/magit
/usr/share/emacs/site-lisp/x-face-el
/usr/share/emacs/site-lisp/apel/attic
/usr/share/emacs/25.2/lisp
/usr/share/emacs/25.2/lisp/vc
/usr/share/emacs/25.2/lisp/url
/usr/share/emacs/25.2/lisp/textmodes
/usr/share/emacs/25.2/lisp/progmodes
/usr/share/emacs/25.2/lisp/play
/usr/share/emacs/25.2/lisp/org
/usr/share/emacs/25.2/lisp/nxml
/usr/share/emacs/25.2/lisp/net
/usr/share/emacs/25.2/lisp/mh-e
/usr/share/emacs/25.2/lisp/mail
/usr/share/emacs/25.2/lisp/leim
/usr/share/emacs/25.2/lisp/language
/usr/share/emacs/25.2/lisp/international
/usr/share/emacs/25.2/lisp/gnus
/usr/share/emacs/25.2/lisp/eshell
/usr/share/emacs/25.2/lisp/erc
/usr/share/emacs/25.2/lisp/emulation
/usr/share/emacs/25.2/lisp/emacs-lisp
/usr/share/emacs/25.2/lisp/cedet
/usr/share/emacs/25.2/lisp/calendar
/usr/share/emacs/25.2/lisp/calc
/usr/share/emacs/25.2/lisp/obsolete
#+end_example

** Bookmarks and auto-save
*** Bookmarks
#+BEGIN_SRC emacs-lisp
;; (setq bookmark-default-file "~/emacs/state/bookmarks")
;; (setq bookmark-file "~/emacs/state/bookmarks")
;; (setq org-id-locations-file "~/emacs/state/org-id-locations")
#+END_SRC

*** Auto-save a-list
#+BEGIN_SRC emacs-lisp
;; (setq auto-save-list-file-prefix "~/emacs/state/auto-save-list/.saves-")
#+END_SRC


* Appearance
* General Variables
#+BEGIN_SRC emacs-lisp

;;; evaluation and debugging
(setq debug-on-error 1)
(setq max-lisp-eval-depth 2000)
(setq max-specpdl-size 6000)
;;; edebug
(setq edebug-trace t)

;; won't beep anymore.
(setq visible-bell t)

;; replace yes or no with y or n
(fset 'yes-or-no-p 'y-or-n-p) 

;;; scroll-lock mode on
(setq scroll-lock-mode t)
(setq scroll-step 1)

;; ediff buffers side-by-side, like it should
(setq ediff-split-window-function 'split-window-horizontally)

#+END_SRC

* Buffers regions, Status bar, Frames etc.

** Killing buffers, region highlighting
#+BEGIN_SRC emacs-lisp
;;; Buffers
;;; =======
(defun kill-current-buffer ()
  "Kill the current buffer, without confirmation."
  (interactive)
  (kill-buffer (current-buffer)))

;; kill current buffer without confirmation
(global-set-key "\C-xk" 'kill-current-buffer)

;;; Cursor Motion
;;; ============== 
;;; Normally, `C-n' on the last line of a buffer
;; appends a newline to it.  If the variable
;; `next-line-add-newlines' is `nil', then `C-n' gets an error
;; instead (like `C-p' on the first line).
(setq next-line-add-newlines nil)


;;; always confirm before reverting buffer.
(setq revert-without-query nil)



;;; highlights marked region.
(transient-mark-mode 1)
(setq search-highlight t)
(global-set-key "\C-ce" 'shell-command-on-region)



;;; In Konsole or Terminal on Linux, you highlight what you
;;; want then press Shift+Ctrl+C for copy and Shift+Ctrl+V
;;; for paste.

;; Cut-paste  between emacs and the X-clipboard.
;; see http://blog4gng.blogspot.com/2008_02_01_archive.html
(setq x-select-enable-clipboard t)
(setq interprogram-paste-function
      'x-cut-buffer-or-selection-value)


#+END_SRC

** Dictionary and spell-check
#+BEGIN_SRC emacs-lisp

;;; To set aspell as the default spell-check
;;; ALERT: You might need to install aspell and aspell-en
(setq-default ispell-program-name "aspell")

;;; Set English as the default dictionary
(setq ispell-dictionary "en")

;; British English
(ispell-change-dictionary "british" t)


;;; Turn on flyspell mode
(defun turn-on-flyspell () 
(flyspell-mode t))

(add-hook 'find-file-hooks 'turn-on-flyspell)
#+END_SRC

** Ido

Ido seems to gratuitously overwrites files when it has no business do
so.  Exporting a source =org= file with source code blocks into =html=
knocks off the =:tangle= arguments from the source =org= file.  This is
inexcusable.  It's best to turn it off =ido- until some way of taming
it is known.


#+BEGIN_SRC emacs-lisp
;;; Enable ido-mode on startup
;;; (setq ido-enable-flex-matching t)
;;; disable ido
;;; (ido-everywhere 0)
;; (ido-mode t)
#+END_SRC

** Status bar
#+BEGIN_SRC emacs-lisp
;; show column number in status bar
(setq column-number-mode t)
#+END_SRC

** Frame title
#+BEGIN_SRC emacs-lisp
;; user@machine frame title
(setq frame-title-format
      (concat  "%b - emacs@" system-name))



;;; For full screen on starting Emacs

(defun toggle-fullscreen ()
  (interactive)
  (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
			 '(2 "_NET_WM_STATE_MAXIMIZED_VERT" 0))
  (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
			 '(2 "_NET_WM_STATE_MAXIMIZED_HORZ" 0))
  )
(when window-system
  (toggle-fullscreen))


;;; To disable the splash screen
(setq inhibit-splash-screen t)

;;; Display Battery Status
(display-battery-mode t)

;;; Show Column Number
(column-number-mode t)

;;; To show date and time
(setq display-time-day-and-date t
     display-time-12hr-format t)
     (display-time)
#+END_SRC

** Minibuffer

#+BEGIN_SRC emacs-lisp


;;; changing the text size in the minibuffer
;;; http://stackoverflow.com/questions/7869429/altering-the-font-size-for-the-emacs-minibuffer-separately-from-default-emacs

(add-hook 'minibuffer-setup-hook 'my-minibuffer-setup)
(defun my-minibuffer-setup ()
       (set (make-local-variable 'face-remapping-alist)
          '((default :height 1.5))))

#+END_SRC

* Files, hooks etc.

** File-system types
#+BEGIN_SRC emacs-lisp
;;; file-system-types
(require 'pathname)
(setq file-system-types '((unix . unix) (dos . dos)))
#+END_SRC
** Default program used when opening files of different extensions

#+BEGIN_SRC emacs-lisp

;; from sankalp [2012-03-24 Sat]
;; openwith minor mode
;; for opening pdfs in evince, mp3s in some player etc...
(require 'openwith)
(setq openwith-associations
      '(
        ("\\.pdf\\'"  "evince"  (file))
        ("\\.ps\\'"   "evince"  (file))
        ("\\.doc\\'"  "ooffice" (file))
        ("\\.docx\\'" "ooffice" (file))
        ("\\.xls\\'"  "ooffice" (file))
        ("\\.xlsx\\'" "ooffice" (file))
        ("\\.ppt\\'"  "ooffice" (file))
        ("\\.pptx\\'" "ooffice" (file))
        ;; ("\\.\\(?:jp?g\\|png\\)\\'" "display" (file))
        ))
(openwith-mode t)

#+END_SRC

** Turn on =auto-fill= when visiting a file.

#+BEGIN_SRC emacs-lisp
;;; Turn on Auto-fill 
(add-hook 'find-file-hooks 'turn-on-auto-fill)
#+END_SRC

* Info 
#+BEGIN_SRC emacs-lisp
  ;;; info
  ;;; http://www.emacswiki.org/emacs/InfoPath
;;  (add-to-list 'Info-default-directory-list "~/emacs/info")

;;  (add-to-list 'Info-additional-directory-list "~/emacs/info")
  ;; (add-hook 
  ;;  'Info-mode-hook
  ;;  (lambda ()
  ;;    (setq Info-additional-directory-list Info-default-directory-list)
  ;; ))
#+END_SRC

* Miscellaneous
#+BEGIN_SRC emacs-lisp
(display-time)
(put 'eval-expression 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(setq resize-mini-windows t)
(setq mode-require-final-newline t)
(setenv "EDITOR" "/usr/bin/emacsclient")
#+END_SRC

* Text mode

#+BEGIN_SRC emacs-lisp
;;; Control the fill column when in text mode
(add-hook 'text-mode-hook
	  (function (lambda ()
		      (set-fill-column 
;		       72
;                      70
;		       64
                      60
;                       48  ; ideal for large font
;                       40  ; large font on projector
		       ))))
#+END_SRC


** word count  on text files
#+BEGIN_SRC emacs-lisp
(defun wc (start end)
  (interactive "r")
  (shell-command-on-region start end "wc"))
#+END_SRC

* Bash 

#+BEGIN_SRC emacs-lisp
;; BASH
;; ====
;; Include the following only if you want to run
;; bash as your shell.

;; Setup Emacs to run bash as its primary shell.
(setq shell-file-name "bash")
(setq shell-command-switch "-c")
(setq explicit-shell-file-name shell-file-name)
(setenv "SHELL" shell-file-name)

(defconst shell-prompt-pattern 
  "^\[[A-Za-z0-9]*:[^]]*\]"

  "*Regexp used by Newline command to match subshell prompts.
Anything from beginning of line up to the end of what this pattern matches
is deemed to be a prompt, and is not reexecuted.")
#+END_SRC

* Shell mode

#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
      (cons '("\\.properties$" . shell-script-mode) 
	    auto-mode-alist))

(setq auto-mode-alist
      (cons '("\\.prop$" . shell-script-mode) 
	    auto-mode-alist))

(setq auto-mode-alist
      (cons '("\\.conf$" . shell-script-mode) 
	    auto-mode-alist))

;; shell scripts
(setq auto-mode-alist
      (cons '("\\.sh$" . shell-script-mode) 
	    auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.bash$" . shell-script-mode) 
	    auto-mode-alist))
#+END_SRC


#+BEGIN_SRC emacs-lisp
;; Makefiles
(setq auto-mode-alist
      (cons '("\\.mak$" . makefile-mode) auto-mode-alist))
#+END_SRC

* Python mode
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook
	  (function 
	     (lambda ()
	       (setq tab-width 4))))
#+end_src
* Abbrevs

See http://www.emacswiki.org/emacs/AbbrevMode

* Org mode configuration

** Automatically switch to org-mode 

Also load the org-mode customizations.

#+BEGIN_SRC emacs-lisp
  (add-to-list 
   'auto-mode-alist
    '("\\.org$" . org-mode))

   (add-hook 'org-mode-hook
             (function (lambda ()
                         (load "org-custom"))))


#+END_SRC

** Appointments
Please invoke the function =bh/org-agenda-to-appt= in
[[./custom/org-mode/norang.el]] to set up appointments for the
day.

* Comint mode

#+BEGIN_SRC emacs-lisp
;;; Comint
;;; ======
(add-hook 'comint-output-filter-functions
                    'comint-strip-ctrl-m)
     
(add-hook 'comint-output-filter-functions
	  'comint-watch-for-password-prompt)
#+END_SRC

* Scheme and Racket mode

We work with only the Racket dialect of Scheme.  The
=racket= emacs support uses the =racket-mode= available in
=packages/elpa/=.

#+BEGIN_SRC emacs-lisp
;;; custom racket-support.el defined here
(setq racket-racket-program
      ; "~/apps/racket/racket-6.1.1/bin/racket"
	  "~/apps/racket/racket-6.7/bin/racket"
)

(setq racket-raco-program
      ; "~/apps/racket/racket-6.1.1/bin/raco"
       "~/apps/racket/racket-6.7/bin/raco"
)


(add-hook 'racket-mode-hook 
	  (function (lambda ()
		      (load "racket-support"))))
#+END_SRC
* Javascript mode

** Running JS shell in emacs

Follow https://www.emacswiki.org/emacs/NodeJs
Also see https://github.com/redguardtoo/js-comint for the
latest version.


We use the =js-comint= package for running Javascript
#+BEGIN_SRC emacs-lisp
(require 'js-comint)
(defun inferior-js-mode-hook-setup ()
  (add-hook 'comint-output-filter-functions 'js-comint-process-output))
(add-hook 'inferior-js-mode-hook 'inferior-js-mode-hook-setup t)
;;; (setq inferior-js-program-command "node --interactive")
(setq inferior-js-program-command "node")
(setq inferior-js-program-arguments '("--interactive"))


#+END_SRC

Within emacs we work with the =node.js= implementation of
Javascript.  

**  COMMENT Nodejs-Repl
Suppressed for now.

Install from elpa.
All this from the =nodejs-repl-readme.txt= under elpa.
#+BEGIN_SRC emacs-lisp
;; (require 'nodejs-repl)
;; (setq nodejs-repl-command "nodejs")

;; (add-hook 'js-mode-hook
;; 		  (lambda ()
;; 			(define-key js-mode-map (kbd "C-x C-e") 'nodejs-repl-send-last-sexp)
;; 			(define-key js-mode-map (kbd "C-c C-r") 'nodejs-repl-send-region)
;; 			(define-key js-mode-map (kbd "C-c C-l") 'nodejs-repl-load-file)
;; 			(define-key js-mode-map (kbd "C-c C-z") 'nodejs-repl-switch-to-repl)))
#+END_SRC
** JS-2 mode

From ELPA.  This is the current working setup.

#+BEGIN_SRC emacs-lisp
(autoload 'js2-mode "js2-mode" nil t)
(add-hook 'js-mode-hook 'js2-minor-mode)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.json$" . js2-mode))
(add-hook 'js-mode-hook 'js2-minor-mode)
;;; (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js2-jsx-mode))
;;; (add-to-list 'interpreter-mode-alist '("node" . js2-jsx-mode))
(add-to-list 'interpreter-mode-alist '("node" . js2-mode))
(add-hook 'js2-mode-hook
          (lambda ()
            (local-set-key (kbd "C-x C-e") 'js-send-last-sexp)
            (local-set-key (kbd "C-M-x") 'js-send-last-sexp-and-go)
            (local-set-key (kbd "C-c b") 'js-send-buffer)
            (local-set-key (kbd "C-c C-b") 'js-send-buffer-and-go)
            (local-set-key (kbd "C-c l") 'js-load-file-and-go)))

;;; enable nvm support, 
;;; see https://github.com/redguardtoo/js-comint
(js-do-use-nvm)
#+END_SRC

** JS-3 mode
Install from elpa.  This is currently not loaded.  We are
working with JS-2 mode.

#+BEGIN_SRC emacs-lisp
;;; javascript
;;; (autoload 'js3-mode "js3" nil t)
;;; (add-to-list 'auto-mode-alist '("\\.js$" . js3-mode))
;;; (add-to-list 'auto-mode-alist '("\\.json$" . js3-mode))
#+END_SRC

** Tern
Tern (http://ternjs.net/doc/manual.html#emacs) is a code
analyser for javascript.
Install from elpa.  Disabled for now.

#+BEGIN_SRC emacs-lisp
;; (autoload 'tern-mode "tern.el" nil t)
;;; auto-enable tern-mode when running javascript
;; (add-hook 'js-mode-hook (lambda () (tern-mode t)))
#+END_SRC

* Makefile mode
* Coq
#+BEGIN_SRC emacs-lisp
;;; coq

;;; see   /home/choppell/venk/emacs/ProofGeneral-4.2/

;; (add-to-load-path '("~/emacs/packages/other/ProofGeneral-4.2/generic"))
;; (load-file "~/emacs/packages/other/ProofGeneral-4.2/generic/proof-site.el")
#+END_SRC

* Browser interaction

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 
  'browse-url-generic)

(setq browse-url-generic-program "/usr/bin/google-chrome")

#+END_SRC

* General Key bindings
This  should be the last section in the emacs init file.
** Key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-c\C-g" 'goto-line)
(global-set-key "\C-cl" 'font-lock-mode)
(global-set-key "\C-c\C-b" 'eval-buffer)
(global-set-key "\C-cr" 'repeat-complex-command)
(global-set-key "\C-cc" 'compile)
(global-set-key "\C-cu" 'browse-url-at-point)
(global-set-key "\C-h\C-x\C-f" 'describe-face)
(global-set-key "\C-cw" 'wc)
(global-set-key "\C-cs" 'shell)

(global-set-key ";" 'comment-region)

(define-key global-map [(escape) (control f)]
  'forward-sexp)

(define-key global-map [(escape) (control b)]
'backward-sexp)

(define-key global-map [(escape) (control k)]
'kill-sexp)

(define-key global-map [(control c) (f)]
'strip-forward-sexp)
(define-key global-map [(control c) (b)]
'strip-backward-sexp)

(global-set-key (kbd "C-c [") 'insert-pair)
(global-set-key (kbd "C-c {") 'insert-pair)
(global-set-key (kbd "C-c \"") 'insert-pair)


(define-key global-map [(control x) (r)] 
'shell-command-on-region)

(define-key global-map [(control c) (o)] 'org-iswitchb)
(define-key global-map [(control c) (k)] 'org-capture)

;;; more keys defined here
;;; TODO move above bindings to keys.
;; (load "keys" nil t)

;;; Chris Haynes's Jun 87 customizations
;; (load "emacs" nil t)
#+END_SRC


** Key unbindings
#+BEGIN_SRC emacs-lisp
;; Goodbye RMAIL
(global-unset-key "\C-xr")
(global-unset-key "\C-xm")
#+END_SRC


* Custom

#+begin_src emacs-lisp
(custom-set-variables
 '(tab-width 4))

(setq tab-always-indent 'complete)
#+end_src
* Noweb expansion

#+begin_src emacs-lisp
;;; advice from Thirumal
(setq org-babel-use-quick-and-dirty-noweb-expansion t)
#+end_src

* Chrome interface
Editing with Emacs on Chrome browser

  https://www.emacswiki.org/emacs/Edit_with_Emacs

Note this requires starting Chrome command line with

#+BEGIN_EXAMPLE
--proxy-bypass-list=127.0.0.1:9292 
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (require 'edit-server)
  (when (require 'edit-server nil t)
    (setq edit-server-new-frame nil)
    (edit-server-start))

  (autoload 'edit-server-maybe-dehtmlize-buffer "edit-server-htmlize" "edit-server-htmlize" t)
  (autoload 'edit-server-maybe-htmlize-buffer   "edit-server-htmlize" "edit-server-htmlize" t)
  (add-hook 'edit-server-start-hook 'edit-server-maybe-dehtmlize-buffer)
  (add-hook 'edit-server-done-hook  'edit-server-maybe-htmlize-buffer)
#+END_SRC

** Edit gmail message mode

See this blog article

 http://endlessparentheses.com/write-gmail-in-emacs-the-easy-way-gmail-message-mode.html
* Date Tree for work logs
* Faces customization
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(outline-2 ((t (:inherit font-lock-variable-name-face :foreground "steel blue"))))
 '(outline-3 ((t (:inherit font-lock-keyword-face :foreground "dark slate gray")))))
#+END_SRC

* BibTeX 

** Helm-Bibtex

[[https://github.com/tmalsburg/helm-bibtex][Helm-BibTeX]] is a package for managing bibliographic
references.


#+BEGIN_SRC elisp
(autoload 'helm-bibtex "helm-bibtex" "" t)
(setq bibtex-completion-pdf-field "File") ; use pdf
#+END_SRC

* Startup
** Appearance
#+BEGIN_SRC emacs-lisp
;; Appearance
;; ==========


(setq frame-width 60) ;; works for bold-24 on my laptop
(setq frame-height 20);; works for bold-24 on my laptop
(setq font-string 
;      "-*-Courier-medium-r-normal-*-18-*-*-*-m-*-iso8859-1"
;      "-*-Courier-medium-r-normal-*-24-*-*-*-m-*-iso8859-1"

;      "-*-Courier-bold-r-normal-*-12-*-*-*-m-*-iso8859-1"
;      "-*-Courier-bold-r-normal-*-18-*-*-*-m-*-iso8859-1" ;      not defined
      "-*-Courier-bold-r-normal-*-24-*-*-*-m-*-iso8859-1"
)

;; font lock
(require 'font-lock)
(global-font-lock-mode 1)
;;(font-lock-mode 1)
(load "faces-config")
; lazy lock breaks font-locking in java files
;; (setq font-lock-support-mode 'lazy-lock-mode)

;; frame-width and frame-height come from 
(setq default-frame-alist 
      `((top . 25) (left . 10)
	(width . ,frame-width) (height . ,frame-height)
	(cursor-type . box)
;; colors are set in faces-config.el
	(cursor-color . "red")
;	(font . ,font-string)

))
#+END_SRC

** Text Scaling

#+BEGIN_SRC emacs-lisp

;;; Restoring font size when visiting files.

;;; https://groups.google.com/forum/#!topic/gnu.emacs.help/0CVSYlNm9J4
 ;; Restore text-scale after change of major mode.

;; ;;  (setq text-scale-mode-amount 3)
;; (autoload 'text-scale-mode "face-remap")
;; (add-hook 'change-major-mode-hook 
;; 	  (lambda ()
 ;	    (put 'text-scale-mode-amount 'permanent-local t)
;; 	    (text-scale-set 3)
;; 	    ))
;; (add-hook 'after-change-major-mode-hook 'text-scale-mode)

;; (set-face-attribute 'default nil :height 120)
 (add-hook 'after-change-major-mode-hook 
 	  (lambda ()  (text-scale-set 3)))
#+END_SRC

** Window splitting etc.

#+BEGIN_SRC emacs-lisp
;;; split windows vertically, 
;;; see responses in the blog
;;; http://galder.zamarreno.com/?p=134

(setq split-width-threshold nil)
#+END_SRC

** Mode line

#+BEGIN_SRC  emacs-lisp

  ;; mode-line
  (defun set-mode-line ()
    (interactive)
    "sets customized mode-line"
    (setq mode-line-format   
          (list
           "-" 
           'mode-line-mule-info 
           'mode-line-modified 
           '(line-number-mode "L%l--") 
           '(column-number-mode "C%c--") 
           '(-3 . "%p") 
           'mode-line-frame-identification 
           'mode-line-buffer-identification 
           "   " 
           'global-mode-string 
           "   %[(" 
           'mode-name 
           'mode-line-process 
           'minor-mode-alist 
           "%n" 
           ")%]--" 
           '(which-func-mode ("" which-func-format "--")) 
           "-%-")))

#+END_SRC


** Loading basic libraries
#+begin_src emacs-lisp
(load "org-custom")
#+end_src
** Dired mode

#+BEGIN_SRC emacs-lisp
(load "cd.el")  ;; from emacs/lisp/cd.el
(global-set-key "\C-cd" 'cd-buffer-dir)
(add-hook 'dired-load-hook
  (function 
    (lambda ()
      (setq dired-copy-preserve-time t)
      (setq dired-recursive-copies 'top)
      (setq dired-dwim-target t) ;
					; set dired-do-renames
					; default
					; target to the
					; other window
      (define-key dired-mode-map "b" 'browse-url-of-dired-file)
      (load "dired-x")
      (load "dired-operations")
      (define-key dired-mode-map "z" 'dired-remote-copy)
      (define-key dired-mode-map "r" 'rsync-se-101) 
      (define-key dired-mode-map "T" 'dired-trash-files)
      (define-key dired-mode-map "\C-ca" 'dired-acroread-file)
      )))

(load "dired")
#+END_SRC

** Paren matching functions 
Code from 1995! (Thanks, Anurag!)

#+BEGIN_SRC emacs-lisp
;;; Turn on parentheses match highlighting
(show-paren-mode 1)


(load "emlib.el")
(setq blink-matching-paren-distance 100000)
#+END_SRC
** Server
#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

