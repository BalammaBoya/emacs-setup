#+title: Notes

* Installing packages automatically from a list

- https://stackoverflow.com/questions/10092322/how-to-automatically-install-emacs-packages-by-specifying-a-list-of-package-name

- [[http://endlessparentheses.com/new-in-package-el-in-emacs-25-1-user-selected-packages.html][New in Emacs 25.1: User-selected packages]]


* Older org releases

 - [[http://orgmode.org/cgit.cgi/org-mode.git/refs/]]


* Emacs load-path


https://www.emacswiki.org/emacs/LoadPath

#+BEGIN_SRC elisp :tangle no
(let ((default-directory  "~/.emacs.d/lisp/"))
  (normal-top-level-add-subdirs-to-load-path))
#+END_SRC
* Structure

#+BEGIN_EXAMPLE
 /
  src/
   custom/    ; org-files or el files
   init.org
   lib/       ; only el files

  build/
   code/
    init.el   ; runs when emacs starts
    deploy.el ; runs when emacs is deployed
    custom/   ; customizations to various modes
    elpa -> 
    lib/
     elpa/
     git/
     other/

   
    

#+END_EXAMPLE

* Code for modular load-path spec

#+BEGIN_SRC emacs-lisp :eval no :tangle no
(let ((default-directory (file-name-directory load-file-name)))
	  (normal-top-level-add-subdirs-to-load-path))

(defun foo (s)
  (cond ((stringp s) (list s))
		((listp s)
		 (let ((parent (car s))
			   (children (mapcan (lambda (v) (foo v))  (cdr s))))
		   (mapcar (lambda (child) 
					 (expand-file-name child parent))
				   children)))))


(setq lf-name "~/org/")

(file-name-directory lf-name)
(defvar load-path-rel-dirs
  (foo `(,(file-name-directory lf-name)
		 ("custom"
		  "dired"
		  "faces"
		  "misc"
		  ("org-mode"
		   ("contrib" 
			"dblock" 
			"ox-bibtex"
			)
		   )
		  "racket"
		  "shell"
		  )
		 )
	   )
	 

	

	
    
    ("dired/" 
	 "faces/"
	 "misc/" 
	 ("org-mode/" 
	  ("dblock"))
   "racket"))

#+END_SRC

* Structure of init-file

* Progress

** [2017-10-01 Sun]  

Customization works with org-9.1.1!


Right now, in the init.el file, there are require directives
that need the installation of packages.  Since package
install is suppressed in the init file, this causes errors
unless packages are already installed. 


To solve this problem, we propose that 

 - 1. packages be installed as part of an additional make
   process.

 - 2. then, when emacs starts, packages are installed and
   requires get resolved. 


#+BEGIN_EXAMPLE
make tangle
make install-packages  # this needs the net and could take long.
emacs -q -l .../code/init.el  # packages already installed.
#+END_EXAMPLE 
* Controlling addition of Custom fields

https://www.reddit.com/r/emacs/comments/53zpv9/how_do_i_get_emacs_to_stop_adding_custom_fields/

* Calling an interactive function non-interactively
https://emacs.stackexchange.com/questions/32753/call-interactive-function-from-elisp-code-without-worrying-about-arguments/32756


* Passing minibuffer input automatically to an interactive function

https://emacs.stackexchange.com/questions/10393/how-can-i-answer-a-minibuffer-prompt-from-elisp

* how to answer yes or no automatically in emacs
https://stackoverflow.com/questions/6591043/how-to-answer-yes-or-no-automatically-in-emacs

* understanding  cl-letf and how it replaces flet

http://endlessparentheses.com/understanding-letf-and-how-it-replaces-flet.html
