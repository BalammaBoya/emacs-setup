;; Object semantic.cache
;; SEMANTICDB Tags save file
(semanticdb-project-database "semantic.cache"
  :file "semantic.cache"
  :tables (list 
   (semanticdb-table "mew.el"
    :file "mew.el"
    :pointmax 23247
    :major-mode 'emacs-lisp-mode
    :tokens '(("mew-version-number" variable nil "3.3rc1" ((const . t)) "Version number for this version of Mew." nil [429 511]) ("mew-version" variable nil (format "Mew version %s" mew-version-number) ((const . t)) "Version string for this version of Mew." nil [512 623]) ("mew" package nil nil nil [624 638]) ("mew-const" include nil nil nil [639 659]) ("mew-blvs" include nil nil nil [660 679]) ("mew-func" include nil nil nil [680 699]) ("mew-vars" include nil nil nil [700 719]) ("mew-vars2" include nil nil nil [720 740]) ("cond" code nil [741 881]) ("eval-when-compile" code nil [883 982]) ("mew-version-show" function nil nil ((user-visible . t)) "Show mew-version in minibuffer." nil [984 1092]) ("mew-debug" variable nil nil nil "'decode, 'encode, 'net, 'pgp, 'thread, 'sort, 'pack, t for all." nil [1187 1277]) ("mew-debug" function nil ("category") nil (or (eq mew-debug t) (eq mew-debug category)) nil [1278 1357]) ("mew-profile" variable nil nil nil nil nil [1359 1383]) ("mew-profile-functions-list" variable nil nil nil nil nil [1384 1423]) ("mew-init-p" variable nil nil nil nil nil [1513 1536]) ("mew" function nil ("&optional" "arg") ((user-visible . t)) "Execute Mew first unless Mew is running. And retrieve arrived
messages or just visit to the default folder.

'proto' is determined by 'mew-proto' and 'mew-input-case'.  

If 'proto' is '+' (ie a local folder), a mailbox is determined
according to 'mew-mailbox-type'. Otherwise (ie a remote folder), an
appropriate protocol to retrieve messages is chosen according to
'proto'.

If 'mew-auto-get' is 't', arrived messages are asynchronously fetched
and listed up in Summary mode.

'mew-auto-get' is 'nil', just visit to the folder determined by
'proto'.

When executed with '\\[universal-argument]', 'mew-auto-get' is
considered reversed." nil [1553 2723]) ("mew-send" function nil ("&optional" "to" "cc" "subject") ((user-visible . t)) "Execute Mew then prepare a draft. This may be used as library
function." nil [2740 2976]) ("mew-user-agent-compose" function nil ("&optional" "to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions") nil "Set up message composition draft with Mew.
This is 'mail-user-agent' entry point to Mew.

The optional arguments TO and SUBJECT specify recipients and the
initial Subject field, respectively.

OTHER-HEADERS is an alist specifying additional
header fields.  Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

A Draft buffer is prepared according to SWITCH-FUNCTION.

CONTINUE, YANK-ACTION and SEND-ACTIONS are ignored." nil [2993 4124]) ("mew-init" function nil nil nil (with-temp-buffer (run-hooks (quote mew-env-hook)) (load mew-rc-file (quote no-err) (quote no-msg)) (switch-to-buffer (current-buffer)) (mew-window-configure (quote (1 0))) (mew-hello) (message "Setting up Mew world...") (mew-set-environment) (run-hooks (quote mew-init-hook)) (mew-status-update t) (mew-passwd-setup) (mew-highlight-timer-setup) (setq mew-init-p t) (message "Setting up Mew world...done")) nil [4228 4704]) ("mew-set-environment" function nil ("&optional" "no-dir") nil (let (error-message) (condition-case nil (progn (cond ((string-match "^\\(18\\|19\\)" emacs-version) (setq error-message "Not support Emacs 18/19 nor Mule 1
") (error ""))) (or no-dir (mew-buffers-init)) (or no-dir (mew-temp-dir-init)) (mew-mark-init) (mew-config-init) (mew-rotate-log-files mew-smtp-log-file) (mew-rotate-log-files mew-nntp-log-file)) (error (set-buffer (generate-new-buffer mew-buffer-debug)) (goto-char (point-max)) (insert "

Mew errors:

") (and error-message (insert error-message)) (set-buffer-modified-p nil) (setq buffer-read-only t) (error "Mew found some errors above.")))) nil [4706 5525]) ("mew-touch-folder-check" function nil nil ((user-visible . t)) "Create dummy file and check modification of directory timestamps.
If operating system cannot update directory timestamp,
set mew-touch-folder-p to t" nil [5527 6348]) ("mew-folder-init" function nil ("folders") nil (let (folder dir) (while folders (setq folder (mew-canonicalize-folder (car folders))) (setq folders (cdr folders)) (setq dir (mew-expand-folder folder)) (unless (file-exists-p dir) (mew-make-directory dir) (mew-local-folder-insert folder) (message "%s was created" dir)) (setq dir (file-chase-links dir)) (if (file-exists-p dir) (if (/= mew-folder-mode (mew-file-get-mode dir)) (set-file-modes dir mew-folder-mode))))) nil [6442 6950]) ("mew-status-update" function nil ("arg") ((user-visible . t)) "Read Addrbook and update its information. 
If executed with '\\[universal-argument]', information about local folders is 
also updated in addition to that of Addrbook. 
If executed with '1', information about local folders is updated.
If executed with '2', information about newsgroups is updated.
If executed with '3', information about IMAP folders is updated. " nil [6952 8223]) ("mew-mime-content-type-list" variable nil nil nil "Candidate of Content-Type: when CT: is changed in draft buffer." nil [8225 8332]) ("mew-ct-setup" function nil nil nil (let ((cts mew-mime-content-type) ct) (while cts (setq ct (car (car cts))) (setq cts (cdr cts)) (if (and (stringp ct) (not (string-match "/$" ct))) (setq mew-mime-content-type-list (cons (capitalize ct) mew-mime-content-type-list))))) nil [8334 8621]) ("mew-frame-id" function nil ("&optional" "frame") nil (if window-system (let ((fram (or frame (selected-frame)))) (concat "mew-current-info-" (cdr (assq (quote window-id) (frame-parameters fram))))) "mew-current-info-no-window") nil [8716 8940]) ("mew-current-info-list" variable nil (quote ("fld" "msg" "part" "window")) nil nil nil [8942 9003]) ("mew-info-defun" code nil [9005 9058]) ("mew-current-set" function nil ("fld" "msg" "part") nil (mew-current-set-fld (mew-frame-id) fld) nil [9060 9229]) ("mew-current-clean-up" function nil nil nil (if window-system (let ((frams (frame-list))) (while frams (mew-info-clean-up (concat "mew-current-info-" (mew-frame-id (car frams)))) (setq frams (cdr frams)))) (mew-info-clean-up "mew-current-info-no-window")) nil [9231 9497]) ("mew-current-set-window-config" function nil nil nil (mew-current-set-window (mew-frame-id) (current-window-configuration)) nil [9499 9615]) ("mew-current-get-window-config" function nil nil nil (let ((win (mew-current-get-window (mew-frame-id)))) (unless (window-configuration-p win) (setq win mew-inbox-window)) (if win (set-window-configuration win)) (mew-current-set-window (mew-frame-id) nil) (mew-summary-toolbar-update) (mew-redraw)) nil [9617 9934]) ("mew-inbox-window" variable nil nil nil nil nil [10041 10070]) ("mew-window-stack" variable nil nil nil nil nil [10071 10100]) ("mew-window-clean-up" function nil nil nil (setq mew-window-stack nil) nil [10102 10162]) ("mew-window-push" function nil nil nil (let ((frame (selected-frame)) (config (current-window-configuration))) (setq mew-window-stack (cons (cons frame config) mew-window-stack))) nil [10164 10338]) ("mew-window-pop" function nil nil nil (let* ((frame (selected-frame)) (assoc (assoc frame mew-window-stack))) (if (and assoc (window-configuration-p (cdr assoc))) (set-window-configuration (cdr assoc)) (switch-to-buffer (get-buffer-create mew-window-home-buffer))) (setq mew-window-stack (delq assoc mew-window-stack))) nil [10340 10666]) ("mew-delete-other-window" function nil nil nil (unless (one-window-p) (let ((owin (selected-window)) wins ret) (walk-windows (lambda (win) (set-buffer (window-buffer win)) (unless (or (eq owin win) (string-match "^mew-" (symbol-name major-mode))) (setq wins (cons win wins)))) nil) (while wins (unless (one-window-p) (setq ret t) (delete-window (car wins))) (setq wins (cdr wins))) (select-window owin) ret)) nil [10766 11232]) ("mew-window-configure" function nil ("action") nil "Configure windows accroding to ACTION.
ACTION should be symbol or a list of two numbers.
Predefined symbol is 'summary, 'message, and 'draft.
They are used as a key of 'mew-window-configuration to get
a list of two numbers.

Two numbers means the ratio of the upper window and 
the lower window (i.e. the window of Message buffer).

If Message buffer does not exist, it will be created. If the height of
the lower window is not zero, switch to the buffer." nil [11234 13361]) ("mew-window-number" function nil nil nil (let ((x (car (mew-window-edges (selected-window)))) (i 1)) (walk-windows (lambda (win) (when (save-excursion (set-buffer (window-buffer win)) (mew-summary-or-virtual-p)) (if (< (car (mew-window-edges win)) x) (setq i (1+ i))))) (quote nominibuf)) i) nil [13456 13780]) ("mew-buffer-message" function nil nil nil (let* ((me (selected-frame)) (frames (frame-list)) (len (length frames)) (n (mew-window-number)) (i 0)) (catch (quote loop) (while frames (if (equal me (car frames)) (throw (quote loop) i)) (setq i (1+ i)) (setq frames (cdr frames)))) (setq i (- len i 1)) (if (= n 1) (format "%s%d" mew-buffer-message i) (format "%s%d<%d>" mew-buffer-message i n))) nil [13782 14190]) ("mew-buffers" variable nil nil nil nil nil [14278 14302]) ("mew-buffers-init" function nil nil nil (setq mew-buffers nil) nil [14304 14356]) ("mew-buffers-setup" function nil ("folder") nil (mew-addq mew-buffers folder) nil [14358 14424]) ("mew-buffers-bury" function nil nil nil (let ((buffers mew-buffers)) (while buffers (if (get-buffer (car buffers)) (bury-buffer (car buffers))) (setq buffers (cdr buffers)))) nil [14426 14609]) ("mew-buffers-clean-up" function nil nil nil (while mew-buffers (mew-remove-buffer (car mew-buffers)) (setq mew-buffers (cdr mew-buffers))) nil [14611 14768]) ("mew-temp-dir" variable nil nil nil nil nil [14868 14893]) ("mew-temp-file" variable nil nil nil nil nil [14935 14961]) ("mew-temp-dir-init" function nil nil nil "Setting temporary directory for Mew.
mew-temp-file must be local and readable for the user only
for privacy/speed reasons. " nil [15007 15422]) ("mew-temp-dir-clean-up" function nil nil nil "A function to remove Mew's temporary directory recursively. 
It is typically called by kill-emacs-hook." nil [15424 15782]) ("mew-regex-msg-show" variable nil nil nil nil nil [15882 15913]) ("mew-regex-msg-or-part" variable nil nil nil nil nil [15914 15948]) ("mew-regex-msg-mark" variable nil nil nil nil nil [15949 15980]) ("mew-regex-msg-review" variable nil nil nil nil nil [15981 16014]) ("mew-regex-msg-valid-review" variable nil nil nil nil nil [16015 16054]) ("mew-regex-msg-delete" variable nil nil nil nil nil [16055 16088]) ("mew-regex-attach-beg" variable nil nil nil nil nil [16089 16122]) ("mew-regex-attach-end" variable nil nil nil nil nil [16123 16156]) ("mew-regex-my-address-list" variable nil nil nil nil nil [16157 16195]) ("mew-regex-ignore-folders" variable nil nil nil nil nil [16196 16233]) ("mew-mark-regex" function nil ("mark") nil (concat mew-regex-msg (regexp-quote (char-to-string mark))) nil [16235 16329]) ("mew-mark-valid-regex" function nil ("mark") nil (concat mew-regex-msg-valid (regexp-quote (char-to-string mark))) nil [16331 16437]) ("mew-mark-list-regex" function nil ("mark-list") nil (concat mew-regex-msg "[" (mapconcat (quote char-to-string) mark-list "") "]") nil [16439 16555]) ("mew-regex-setup" function nil nil nil (setq mew-eoh (format "^\\(%s\\|\\)$" (regexp-quote mew-header-separator))) nil [16557 17781]) ("mew-theme-setup" function nil nil nil (interactive) nil [17867 18248]) ("mew-bury-buffer" function nil ("&optional" "buf") nil (bury-buffer buf) nil [18338 18425]) ("mew-kill-buffer" function nil ("&optional" "buf") ((user-visible . t)) "Erase the current buffer." nil [18427 18935]) ("mew-buffer-clean-up" function nil ("regex" "&optional" "func") nil (unless func (setq func (quote mew-kill-buffer))) nil [18937 19151]) ("mew-quit-toolbar-update" function nil nil nil (mew-redraw) nil [19153 19310]) ("mew-summary-suspend" function nil nil ((user-visible . t)) "Suspend Mew then switch to another buffer. All buffers of 
Mew remain, so you can resume with buffer operations." nil [19330 19687]) ("mew-summary-quit" function nil nil ((user-visible . t)) "Quit Mew. All buffers of Mew are erased." nil [19689 20627]) ("mew-local" include nil nil nil [20740 20760]) ("mew-addrbook" include nil nil nil [20761 20784]) ("mew-complete" include nil nil nil [20785 20808]) ("mew-minibuf" include nil nil nil [20809 20831]) ("mew-cache" include nil nil nil [20832 20852]) ("mew-encode" include nil nil nil [20853 20874]) ("mew-decode" include nil nil nil [20875 20896]) ("mew-edit" include nil nil nil [20897 20916]) ("mew-mime" include nil nil nil [20917 20936]) ("mew-mark" include nil nil nil [20937 20956]) ("mew-exec" include nil nil nil [20957 20976]) ("mew-header" include nil nil nil [20977 20998]) ("mew-pgp" include nil nil nil [20999 21017]) ("mew-smime" include nil nil nil [21018 21038]) ("mew-bq" include nil nil nil [21039 21056]) ("mew-syntax" include nil nil nil [21057 21078]) ("mew-scan" include nil nil nil [21079 21098]) ("mew-pick" include nil nil nil [21099 21118]) ("mew-summary" include nil nil nil [21119 21141]) ("mew-summary2" include nil nil nil [21142 21165]) ("mew-summary3" include nil nil nil [21166 21189]) ("mew-summary4" include nil nil nil [21190 21213]) ("mew-virtual" include nil nil nil [21214 21236]) ("mew-thread" include nil nil nil [21237 21258]) ("mew-message" include nil nil nil [21259 21281]) ("mew-draft" include nil nil nil [21282 21302]) ("mew-attach" include nil nil nil [21303 21324]) ("mew-demo" include nil nil nil [21325 21344]) ("mew-refile" include nil nil nil [21345 21366]) ("mew-ext" include nil nil nil [21367 21385]) ("mew-fib" include nil nil nil [21386 21404]) ("mew-sort" include nil nil nil [21405 21424]) ("mew-highlight" include nil nil nil [21425 21449]) ("mew-net" include nil nil nil [21450 21468]) ("mew-ssh" include nil nil nil [21469 21487]) ("mew-ssl" include nil nil nil [21488 21506]) ("mew-smtp" include nil nil nil [21507 21526]) ("mew-pop" include nil nil nil [21527 21545]) ("mew-nntp" include nil nil nil [21546 21565]) ("mew-nntp2" include nil nil nil [21566 21586]) ("mew-imap" include nil nil nil [21587 21606]) ("mew-config" include nil nil nil [21607 21628]) ("mew-auth" include nil nil nil [21629 21648]))
    )
   )
  )
