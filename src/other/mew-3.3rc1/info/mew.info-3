Info file: mew.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `mew.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.







INFO-DIR-SECTION Message User Agent
START-INFO-DIR-ENTRY
* Mew: (mew.info).           Messaging in the Emacs World.
END-INFO-DIR-ENTRY






File: mew.info, Node: mew-mark, Next: Refile, Prev: off-line, Up: Top

Marks displayed by Mew
**********************

Here is a summary of marks displayed by Mew.

`M'
     This message is a multipart. Please refer to *Note multipart::.
`T'
     This message was truncated by Mew. Please refer to *Note
     retrieving::.
`S'
     This message is signed. Please refer to *Note pgp-viewing::.
`E'
     This is a cipher message. Please refer to *Note pgp-viewing::.
`P'
     This message is fragmented. Please refer to *Note multi mark::.




File: mew.info, Node: Refile, Next: by-folder, Prev: mew-mark, Up: Top

Happy refiling
**************

When you come to receive hundreds of messages in a day (do not you
believe it?), refiling messages becomes a very tough job. Mew neatly
guesses default folders where the message is supposed to be refiled when
you type `o'. You can see an example below.

     Folder name (+work/mew-dist): +

If the default value in () is proper, just type `RET'. The messages will
be marked with `o' if its refiling folders are decided.

You can refile a message to folders of the same world to which the
message belong. As described above, a world is identified by a
combination of case and proto. When you input a folder to which the
message is refiled, you must not specify case and you must input a
folder whose proto is the same. The reason why you must not specify case
is that case is already known. With other commands, you have to specify
case, if necessary, when you input folder name in minibuffer. This
command is only the exception.

Mew also provides `c' which is very similar to `o'.  To know the
difference, please refer to *Note refile mark::.

As you know, the more excellent refiling guess algorithms become, the
less user's job troublesome. Mew provides you with the following rules.

* Menu:

* by-folder::                   Guess by mailing-list folders
* by-alist::                    Guess by user defined rules
* by-thread::                   Guess by thread
* by-from-folder::              Guess by private folders
* by-from::                     Guess by From:
* by-newsgroups::               Guess by Newsgroups:
* by-default::                  Guess by default rule
* guess-rule::                  Controlling rules
* auto-refile::                 Auto refile



File: mew.info, Node: by-folder, Next: by-alist, Prev: Refile, Up: Refile

Guess by mailing-list folders
=============================

Many users tend to refile messages destined to a mailing-list to a
folder whose name is the same as the mailing-list. Mew provides a
mechanism to guess a mailing-list folder for messages destined to
mailing-lists.

Suppose that you have a folder named +misc/pooh-lovers. The following
message is probably to be refiled to this folder.

     To: pooh-lovers@mew.org 

Likewise, Mew searches a matching folder forward with addresses on To:
and Cc:. There are many people who do not use recursive folders. With
Mew, however, you would not be smart if you do not use it.

Smart users may wonder that they get a trouble in the following
situation where private addresses are on To: or Cc:.

     To: piglet@mew.org
     Cc: pooh-lovers@mew.org

Since pooh is a member of pooh-lovers, he receives this message. But he
has a folder for his friend, pooh. So, +from/piglet may be chosen.

To avoid this, Mew allows you to specify which folders are to be
ignored. The default is +from. So, please take a convention to refile
personal messages under +from.

When Mew guesses a candidate by the folders, it asks you:

     Folder name (+misc/pooh-lovers): +

Just type `RET' if the default is exactly what you want.

If you specify a new folder with `o', the folder is created and added to
the folder list to be used for guess. Convenient, isn't it?

The function name to provide this feature is
`mew-refile-guess-by-folder'.

If you don't use capital letters for folder names, configure as follows
to make this function faster:

     (setq mew-use-fast-refile t)



File: mew.info, Node: by-alist, Next: by-thread, Prev: by-folder, Up: Refile

Guess by user defined rules
===========================

There are some cases where the refile guess mechanism by folders does
not work as you wish. For example, for both a message whose To: is
staff@mew.org and another message whose To: is staff@iijlab.net, the
same folder would be selected with guess by folders (e.g. "+net/staff").
So, Mew allows you to define your own rules explicitly.

Let's look at an example.

     (setq mew-refile-guess-alist
       '(("To:"
           ("staff@mew.org" . "+net/mew/staff")
           ("staff@iijlab.net" . "+net/iijlab/staff"))))

This means that if To: contains staff@mew.org +net/mew/staff is selected
and if To: has staff@iijlab.net +net/iijlab/staff is chosen.

The format of this rule is as follow:

     rule ::= '<rule>
     <rule> ::= ((<key> <alist>) (<key> <alist>) ... [<special>])

The whole is a list of (<key> <alist>). A field name is specified for
<key>. The format for <alist> is as follows:

     <alist> ::= (<value> . <folder>|<rule>) (<value> . <folder>|<rule>) ...

<value> is a field value for <key>. <folder> means a folder to be chosen
if matched. Please note that <value> and <folder> is separated with `.'.

There are two special <key>s: `nil' and `t'. `nil' is used to specify
<folder> to be returned when nothing is guessed. `t' can specify
<folder> to be returned in addition to guessed values.

     <special> ::= (t . <folder>) | (nil . <folder>)

If you know regular expression, a more advanced rule can be defined like
this.

     (setq mew-refile-guess-alist
       '(("Newsgroups:"
         ("^nifty\\.\\([^ ]+\\)" . "+Nifty/\\1")
         (".*"         . "+rec/news"))
        ("To:"
         ("\\(inet\\|wide\\)@wnoc-fuk" . "+wide/\\1-wnoc-fuk"))
        ("From:" 
         ("uucp@"      . "+adm/uucp")
         ("ftpsync@"   . "+adm/ftpsync"))
        (nil . "+unknown")))

The function name to provide this feature is
`mew-refile-guess-by-alist'.



File: mew.info, Node: by-thread, Next: by-from-folder, Prev: by-alist, Up: Refile

Guess by thread
===============

Mew provides a mechanism to guess a folder where the parent message of a
current message was refiled before.

For example, pooh, piglet, and roo had a chat to go and get honey. So,
pooh made +project/honey then refiled the message to it. The further
messages, if they are properly replied, they are supposed to be refiled
to +project/honey.

Information that which folder was chosen for messages is stored to
"~/Mail/.mew-refile-msgid-alist". `mew-lisp-max-length' controls the
amount of this information. The default value is 2000 messages. If you
want limits it to 3000 messages, put the following to "~/.mew.el".

     (setq mew-lisp-max-length 3000)

The function name to provide this feature is
`mew-refile-guess-by-message-id'.



File: mew.info, Node: by-from-folder, Next: by-from, Prev: by-thread, Up: Refile

Guess by private folders
========================

In addition to the mechanism to select a mailing-list folder described
in *Note by-folder::, Mew provides a mechanism to choose a private
folder. Since private folders locate under +from, we can say that this
mechanism select a folder from the folders under +from. Let's see the
following example:

     To: pooh@mew.org
     From: piglet@mew.org

pooh received a message from piglet. If pooh uses this mechanism,
+from/piglet will be chosen according to From:. (Folders under +from can
be recurse. And you can select the entire address for a folder name
instead of the user part.)

The function to provide this feature is
`mew-refile-guess-by-from-folder'.

Next, let's consider a care where pooh replied to piglet. Since pooh
Cc:ed the message to himself, the message was also delivered to him.

     To: piglet@mew.org
     Cc: pooh@mew.org
     From: pooh@mew.org

How do you feel if you are pooh? You may want to refile this to
+from/pooh. Also, you may want to move this to +from/piglet. So, it can
be customized.

If `mew-refile-guess-from-me-is-special' is `t' and if an address in
From: is yourself, `mew-refile-guess-by-from-folder' select a folder
under +from according to To: and/or Cc:.



File: mew.info, Node: by-from, Next: by-newsgroups, Prev: by-from-folder, Up: Refile

Guess by From:
==============

Mew also provides a mechanism to guess a folder by the place where a
message that has the same From: field is refiled.

Suppose that piglet has two addresses, piglet@beech.tree.uk and
p-p-p@mew.org. pooh wants to refile messages from piglet to +from/piglet
no matter what his From: is. This policy can, of course, be implemented
if pooh specifies rules explicitly as follows:

     (setq  mew-refile-guess-alist
       '(("From:"
           ("piglet@beech.tree.uk" . "+from/piglet")
           ("p-p-p@mew.org"        . "+from/piglet"))))

But such a work may bother you. So, first refile a message whose From:
is piglet@beech.tree.uk to +from/piglet. At this time, +from/piglet is
created. Next, refile a message whose From: is p-p-p@mew.org to
+from/piglet. Here Mews learns that p-p-p@mew.org was refiled to
+from/piglet. After this, when messages whose From: is p-p-p@mew.org are
refiled, +from/piglet is chosen.

For another example, you can refile messages from machinery to +adm/misc
without defining an explicit rule.

Information for relationship between From: and folder is stored to
"~/Mail/.mew-refile-from-alist". `mew-lisp-max-length' controls the
amount of this information as the same as *Note by-thread::.

The function name to provide this feature is `mew-refile-guess-by-from'.

If the value of `mew-refile-guess-from-me-is-special' is `t',
`mew-refile-guess-by-from' acts as `mew-refile-guess-by-from-folder'
(*Note by-from-folder::).



File: mew.info, Node: by-newsgroups, Next: by-default, Prev: by-from, Up: Refile

Guess by Newsgroups:
====================

For those who read articles of NetNews received by e-mail with Mew, Mew
provides a mechanism to guess a folder by Newsgroups:. The function name
to provide this feature is `mew-refile-guess-by-newsgroups'.



File: mew.info, Node: by-default, Next: guess-rule, Prev: by-newsgroups, Up: Refile

Guess by default rule
=====================

The default rule is to extract a user name from From: and to choose
`+from/user'. But if `mew-refile-guess-strip-domainpart' is `nil', it
extracts the entire address. So, `+from/user@domain' is chosen.

The function name is `mew-refile-guess-by-default'.



File: mew.info, Node: guess-rule, Next: auto-refile, Prev: by-default, Up: Refile

Controlling rules
=================

Mew controls guess rules by two variables, `mew-refile-guess-control'
and `mew-refile-ctrl-multi'. If you want multiple candidates, set
`mew-refile-ctrl-multi' `t'. Otherwise, set it `nil'.

By default, `mew-refile-guess-control' is declared as follows (since it
is a declaration, `defvar' is used):

     (defvar mew-refile-guess-control
       '(mew-refile-guess-by-alist
         mew-refile-ctrl-throw
         mew-refile-guess-by-newsgroups
         mew-refile-guess-by-folder
         mew-refile-ctrl-throw
         mew-refile-ctrl-auto-boundary
         mew-refile-guess-by-thread
         mew-refile-ctrl-throw
         mew-refile-guess-by-from-folder
         mew-refile-ctrl-throw
         mew-refile-guess-by-from
         mew-refile-ctrl-throw
         mew-refile-guess-by-default))

Mew executes every function defined in `mew-refile-guess-control' in
order. Each function may guess multiple candidates.

Let's see the following example of `mew-refile-guess-control' action.

`mew-refile-guess-by-alist'
         guessed +aaa, +bbb.
`mew-refile-guess-by-folder'
         guessed +ccc, +ddd.
`mew-refile-guess-by-default'
         guessed +eee.

If you want to provide all candidates, +aaa - +eee, set
`mew-refile-ctrl-multi' `t'. If you want to provide +aaa only, set it
`nil'.

If you want +aaa - +ddd but do not want left candidates, in other words,
you want +eee only when no candidate is guessed by functions executed
before, set `mew-refile-ctrl-multi' `t' and insert
`mew-refile-ctrl-throw' between `mew-refile-guess-by-folder' and
`mew-refile-guess-by-default'.

`C-uo' displays the flow of guess rules in Message buffer.



File: mew.info, Node: auto-refile, Next: Pick, Prev: guess-rule, Up: Refile

Auto refile
===========

Those who receives many messages everyday is prone to store thousands of
messages in the +inbox (or %inbox) folder. In such a case, they may want
to speak out like this, "Hey messages, get out of the folder to
somewhere". Mew provides a feature to satisfy such laziness. :) `M-o' is
the spell.

When you execute this function, it marks specific messages with `o'. The
specific messages mean messages which are not marked with `o' nor `D' if
`mew-refile-auto-refile-skip-any-mark' is `nil'. If
`mew-refile-auto-refile-skip-any-mark' is `t', they mean non-marked
messages. The default value of `mew-refile-auto-refile-skip-any-mark' is
`nil'.

`C-uM-o' targets messages marked with `*' regardless the value of
`mew-refile-auto-refile-skip-any-mark'.

Refile rule is the same described in the previous section. Please note
that what this function does is just mark messages with `o'. Messages
are not refiled until you will press `x'.

Mew's refile mechanism is so smart that it would be harmful for this
function. That is, most users would not understand where messages have
been refiled if Mew made most use of its guess mechanism. :) For this
reason, break is provided to limit usage of guess functions. Recall the
declaration up above.

     (defvar mew-refile-guess-control
       '(mew-refile-guess-by-alist
         mew-refile-ctrl-throw
         mew-refile-guess-by-newsgroups
         mew-refile-guess-by-folder
         mew-refile-ctrl-throw
         mew-refile-ctrl-auto-boundary
         mew-refile-guess-by-thread
         mew-refile-ctrl-throw
         mew-refile-guess-by-from-folder
         mew-refile-ctrl-throw
         mew-refile-guess-by-from
         mew-refile-ctrl-throw
         mew-refile-guess-by-default))

You can find the `mew-refile-ctrl-auto-boundary' function in
`mew-refile-guess-control'. Only when auto refile is used, Mew ignores
guess functions below this function. If guess functions above
`mew-refile-ctrl-auto-boundary' didn't guess any folder for a message,
the message is not marked with `o'. Insert
`mew-refile-ctrl-auto-boundary' before you ruin.




File: mew.info, Node: Pick, Next: condition, Prev: auto-refile, Up: Top

Selecting messages
******************

You may want to pick up messages whose Subject: contains a string
"party" and whose From: is kazu@mew.org. Mew provides three methods to
accomplish this.

`?'
     Pick messages according to a pick pattern which you input, then put
     the `*' mark onto them.
`/'
     Go to Virtual mode which gives a single view to picked messages
     from multiple folders. Enter a virtual folder name, comma-separated
     folders, and pick pattern.

These commands select messages by using "mewls". "mewls" targets headers
only. If you want to select messages whose body contain a certain
keyword, use another external command ("grep" by default).  If you use
`C-u?' or `C-u/', they executes the external command instead of "mewls".

There is a command to make Vitual mode for marked message without
inputting pattern.

`m/'
     Making Virtaul mode for messages marked with `*'.

Following sections describes how to input conditions and Virtual mode in
detail.

* Menu:

* condition::                   How to input conditions
* virtual::                     Virtual mode



File: mew.info, Node: condition, Next: virtual, Prev: Pick, Up: Pick

How to input conditions
=======================

When Mew asks a user to input pick pattern, the following message is
displayed.

     Pick pattern: 

Input pick pattern combining the following expressions (which are listed
in the strong order):

`field=string'
     Match if the "field" field contains the "string" string
     (case-insensitive). If you specify "head", it means the entire
     header.
`field==string'
     Match if the "field" field contains the "string" string
     (case-sensitive). If you specify "head", it means the entire
     header.
`field!=string'
     Match if the "field" field does not the "string" string
     (case-insensitive). If you specify "head", it means the entire
     header.
`field!==string'
     Match if the "field" field does not the "string" string
     (case-sensitive). If you specify "head", it means the entire
     header.
`( <pattern> )'
     Evaluate <pattern> first.
`! <pattern>'
     Match if not <pattern>.
`<pattern1> & <pattern2>'
     Match if <pattern1> AND <pattern2>.
`<pattern1> | <pattern2>'
     Match if <pattern1> OR <pattern2>.

Some examples are shown below.

(a) Messages whose From: contains "kazu".

     from=kazu

(b) Messages whose To: contains "mew" OR Cc: contains "mew".

     to=mew | cc=mew

(c) Messages whose To: contains "mew" OR Cc: contains "mew" AND From:
contains "kazu".

     (to=mew | cc=mew) & from=kazu

Now you can guess how to input more complex patterns.


If you want to select messages which contains a certain keyword in its
header or its body, type `C-u?' or `C-u/' to call an external
command. In this case, you are asked as follows:

     Grep pattern: 

Please input a keyword solely. (Do not input expressions up above.)  By
the way, if you want to display a portion which contains selected
keyword, use `M-n' or `M-p' (see *Note review mark::).



File: mew.info, Node: virtual, Next: Quit, Prev: condition, Up: Pick

Virtual mode
============

Virtual mode gives you a single view for matching messages from multiple
folders. Press `/' in Summary mode to enter Virtual mode.

First you are asked to input a single or multiple folder name.  If you
want to specify multiple folders, please separate them with ",".  Of
course, you can complete folder names with `TAB'.

     Folder name (+inbox) : +inbox,+mew

With this example, a name of Virtual mode becomes "*+inbox,+mew*".

Now input conditions.

     Pick pattern: 

OK. You get a Virtual mode. In Virtual mode, you can use most commands
that you can find in Summary mode. You should take note that Virtual
folder is really virtual and it does not exist in file system. If you
exit Mew, it then disappears.

If you put a mark on a message in Virtual mode, the mark is also put
onto the corresponding message in Summary mode. But if you put a mark on
a message in Summary mode, the mark is not put any corresponding
messages in Virtual mode.

You cannot process marks in Virutal mode. Even if you type `x' to
process marks in Virutal mode, you will be asked to move Summary mode.
Also, if you type `x' in Virtual mode for thread, the cursor moves to
corresponding Summary mode and you are asked to type `x' again.


To know how to delete Virtual mode, please refer to *Note Quit::.




File: mew.info, Node: Quit, Next: Customize, Prev: virtual, Up: Top

Give me a break
***************

Here are how to quit and suspend Mew and how to erase a mode (buffer).

<Summary mode and Virtual mode>

`q'
     Suspend Mew then switch to another buffer. All buffers of Mew
     remain, so you can resume with buffer operations.
`Q'
     Quit Mew. All buffers of Mew are erased.
`C-cC-q'
     Erase the current mode (buffer).

<Draft mode and Header mode>

`C-cC-q'
     Erase the draft.

<Addrbook mode>

`C-cC-q'
     Erase the buffer.




File: mew.info, Node: Customize, Next: summary-mode, Prev: Quit, Up: Top

Customizing Mew
***************

Here are explained how to change default setting of Mew and make Mew
your favorite. Edit "~/.mew.el" to do it!

* Menu:

* summary-mode::                Summary mode
* message-mode::                Message mode
* draft-mode::                  Draft mode
* charset::                     Character set
* highlight::                   Highlighting
* hooks::                       Hooks
* pop:: 			POP
* imap::                        IMAP
* nntp::                        NNTP
* smtp::			SMTP
* config::                      Changing receiving/sending behavior
* custom-misc::                 Miscellaneous



File: mew.info, Node: summary-mode, Next: message-mode, Prev: Customize, Up: Customize

Summary mode
============

You can specify the format of Summary mode by `mew-scan-form'.  The
default value is as follows:

     '(type (5 date) " " (14 from) " " t (0 subj))

Like this, `mew-scan-form' is a list of list, symbol, and string.

  1. A string is printed as it is.
  2. A list consists of an integer and a symbol. The symbol specifies a
     function to be called. The name of the function is produced by
     concatenating "mew-scan-form-" and the symbol name.
     (e.g. `mew-scan-form-date' for the symbol 'date').  Pre-defined
     symbols are 'type, 'time, 'date, 'year, 'size, 'from, and
     'subj. For more details, see the explanation of the functions
     called `mew-scan-form-<symbol>'.  The integer specifies the width
     of field which will be filled with a return string of the function.
     A positive value means padding SPCs on the right if necessary.  A
     negative value means padding SPCs on the left if necessary. If a
     negative value is specified, the corresponding function must return
     an ASCII string.  0 means the remaining width of the line and is
     treated as a positive value.
  3. A symbol is equivalent to (1 symbol).
  4. If the first element of `mew-scan-form' is an integer N, this
     integer is converted into '((N num) mark). Otherwise, '((-5 num)
     mark) is appended to `mew-scan-form'. Also note that users must NOT
     use the symbol 'num and 'mark in `mew-scan-form'.
  5. `t' means the position of thread indentation.

An example is as follows:

     (setq mew-scan-form
           '(type (5 date) " " (-4 size) " " (14 from) " " t (0 subj)))

`mew-scan-form-from-me-prefix' is the prefix to be prepend to an
destination address if the message is originated by me. The default is
"To:".


`mew-scan-form-extract-rule' is a list to specify what part to extract
from the From: field. Each element must be 'name, 'comment, 'address,
'nickname, or appropriate "regex". The default value is '(nickname).

Consider the following examples:

     A: Kazu Yamamoto <kazu@mew.org>
     B: kazu@mew.org (Kazu Yamamoto)
     C: Kazuhiko Yamamoto (Kazu) <kazu@mew.org>

Each element returns the following value:

  1. 'name:: Name part, if any
          A. Kazu Yamamoto
          B. (No match)
          C. Kazuhiko Yamamoto (Kazu)
  2. 'comment:: Comment part, if any
          A: (No match)
          B: Kazu Yamamoto
          C: (Kazu)
  3. 'address:: Address part
          A: kazu@mew.org
          B: kazu@mew.org
          C: kazu@mew.org
  4. 'nickname:: one element of personal information in Addrbook
     according to `mew-addrbook-for-summary'. The default value of
     `mew-addrbook-for-summary' is `'nickname'. So, From: is converted a
     nickname by default. To know what kind of value can be used, refer
     to *Note draft-mode::.
  5. (regex):: The substring first matched.

If a element does not match, the next element is applied. If no element
matches to the From: field, or this value is `nil', the whole of the
From: field is used.


If `mew-scan-form-mark-delete' is `t', the `D' mark automatically is put
onto duplicated messages. The default is `nil'.

If `mew-scan-form-mark-review' is `t', the `*' mark automatically is put
onto messages destined to me. The default is `nil'.


If you want to use Mew with full Emacs frame, set like this.

     (setq mew-use-full-window t)


`SPC' in Summary mode decide the next action to view a message according
to `mew-summary-show-direction'. Likewise, you can specify the cursor
direction after putting a strong mark by
`mew-summary-mark-direction'. You can select one from the following
candidates.

`up'
     Display the message above.
`down'
     Display the message below.
`next'
     Display the next message in the direction.
`stop'
     Do not display the next message.

The default value for both is `next'. If you read messages from the
bottom, set as follows:

     (setq mew-summary-show-direction 'up)



File: mew.info, Node: message-mode, Next: draft-mode, Prev: summary-mode, Up: Customize

Message mode
============

It is impossible to display a file, whose data type is not supported by
Emacs, to Message mode. In this case, if there is an appropriate
external application, it can be displayed with the application. Typing
`C-cC-e' on a part in Summary mode executes an external application
showed in Message mode, and displays the file with it.

If you want to specify another external application rather than the
application showed in Message mode, type `C-cC-y'. If you want to
specify a data type and to execute an application according to the data
type, use `C-uC-cC-e'.

To insert a message or a part into Message mode in the raw format, type
`,'. To open an entire message as a file, type `C-cTAB'.


If you just install Mew, an external application like "mozilla" is
necessary to display Text/Html. In this situation, Text/Html is treated
as a part or a body of a message, and explanation to execute an external
application is shown in Message mode. Typing `C-cC-e' on the part or the
message lets the application display the Text/Html. When you type
`C-cC-e' on the message, only body part is passed to the application.

Set your favorite external application for Text/Html to
`mew-prog-text/html-ext'. The following is an example in the case of
"mozilla". (Also, configure `mew-prog-text/html-ext-arg' by setting
application arguments if necessary.)

     (setq mew-prog-text/html-ext "mozilla")

If you install "w3m" and "emacs-w3m", Text/Html can be displayed in
Message mode. (Please note that multilingualized "w3m", not pure "w3m",
is necessary for "wvHtml", "xlhtml", and "ppthtml" described below.)
When you install both of them, add the following to "~/.mew.el'.

     (condition-case nil
         (require 'mew-w3m)
       (file-error nil))

With this, Text/Html can be displayed in Message mode as if it were
Text/Plain. Even in this situation, `C-cC-e' is a valid operation.

Recently there are many message whose have Mulatipart/Alternative, which
consists of Text/Plain and Text/Html. By default, Mew selects
Text/Plain. When you install "emacs-w3m", you may want to choose
Text/Html.  In this case, add the following to "~/.mew.el". (Now, it's
good idea to get back to *Note multipart:: to review how to use `:'.)

     (setq mew-mime-multipart-alternative-list
           '("Text/Html" "Text/Plain" ".*"))


If you install "wvHtml", "xlhtml", "ppthtml", you can display text parts
of WORD, Excel, and PowerPoint file in Message, respectively. Since
these commands uses HTML, the configuration of Text/Html above is
required. Also, you need to install Mule-UCS for Emacs 21.2 or earlier
because UTF-8 (Unicode) is required.

With this, a WORD file, for example, can be displayed in Message mode as
if it were text. Also, typing `C-cC-e' explicitly displays it in Message
mode as text.

To know the repositories of the commands above, see "mew.dot.mew".



File: mew.info, Node: draft-mode, Next: charset, Prev: message-mode, Up: Customize

Draft mode
==========

Define `mew-cc' to use Cc:. When replying, another Cc: field may be
prepared from the target message. If there are multiple Cc: fields, they
are combined to one field on sending.

If you want to receive your originating messages for backup without
specifying your address, use Dcc:. Set your address to `mew-dcc'.

Set header fields that you want to insert every time when you write
messages to `mew-header-alist' as an associate list. The following is an
example.

     (setq mew-header-alist
           '(("X-fingerprint:" . "6B 63 38 88 67 5E 96 8E  CE A4 62 73 3F 11 64 94")
             ("X-URL:" . "http://www.Mew.org/~kazu/")))

To customize citation label, define field to cite in `mew-cite-fields'
and format in `mew-cite-format'. Define citation prefix to
`mew-cite-prefix'. The default declaration is as follows:

     (defvar mew-cite-fields '("From:" "Subject:" "Date:"))
     (defvar mew-cite-format "From: %s\nSubject: %s\nDate: %s\n\n")
     (defvar mew-cite-prefix "> ")

To add Message-ID: to citation label, take this way.

     (setq mew-cite-fields '("From:" "Subject:" "Date:" "Message-ID:"))
     (setq mew-cite-format "From: %s\nSubject: %s\nDate: %s\nMessage-ID: %s\n\n")

To add a user part of an address to the citation prefix, configure as
follows:

     (setq mew-cite-prefix-function (function mew-cite-prefix-username))

With this, the citation prefix becomes like this:

     From: SUMIKAWA Munechika <sumikawa@ebina.hitachi.co.jp>
     Subject: Wine
     Date: Wed, 23 Jul 1997 11:40:50 +0900

     sumikawa> Hi, it's Sumikawa, the guy who's neat from good morning 
     sumikawa> to good night.
     sumikawa>
     sumikawa> Talking about the wonderful wine party, I would propose 
     sumikawa> Cabernet Sauvignon, Bordeaux, '90. 

Both an address in the citation label and the citation prefix can be
converted to an element of a personal information in Addrbook.  They can
be configured by `mew-addrbook-for-cite-label' and
`mew-addrbook-for-cite-prefix', respectively. The default values are
`nil' and `'username', respectively. You can set out of the following
values.  them


'shortname
     Short name
'address
     Address
'username
     User part of address
'nickname
     Nickname
'name
     Full name

Let's consider the following example.

     (setq mew-addrbook-for-cite-label 'nickname)
     (setq mew-addrbook-for-cite-prefix 'nickname)

With the first line, an address in the citation label is replaced with
its nickname. The second line indicates that the cite prefix is replaced
with its nickname.

     From: sumitch
     Subject: Wine
     Date: Wed, 23 Jul 1997 11:40:50 +0900

     sumitch> Hi, it's Sumikawa, the guy who's neat from good morning 
     sumitch> to good night.
     sumitch>
     sumitch> Talking about the wonderful wine party, I would propose 
     sumitch> Cabernet Sauvignon, Bordeaux, '90. 



File: mew.info, Node: charset, Next: highlight, Prev: draft-mode, Up: Customize

Character set
=============

As described in *Note charset-guess::, Mew automatically chooses an
appropriate charset for the message when composing.

If characters of multiple languages exist, and if it is necessary to use
an international charset, `mew-charset-m17n' is used. Its default value
is "utf-8" (equivalent to Unicode). If you want to set it to
"iso-2022-jp-2", configure like this:

     (setq mew-charset-m17n "iso-2022-jp-2")

If you want to check a chosen charset when composing, configure
`mew-ask-charset'.

`nil'
     Not ask.
`A list of charset'
     Ask if the charset is not a member of the list.
`t'
     Ask if `mew-charset-m17n' is used.

For instance, if you want to check when charset other than US-ASCII,
ISO-8859-1, and ISO-8859-15, configure like this:

     (setq mew-ask-charset '("us-ascii" "iso-8859-1" "iso-8859-15"))


For example, when "utf-8" is chosen for a message with this
configuration, you are asked like this:

     utf-8 is used. OK? (y or n) 

Typing `y' makes the composed message sent (or queued). If you type `n',
you will go back to the original draft.


In Europe Latin 9 (ISO-8859-15 or Latin 0), which includes the euro
sign, is getting more and more popular instead of Latin 1 (ISO-8859-1).
If characters of both Latin 1 and Lain 9 exit in a draft, Mew takes the
following step to decide a charset.

  1. If `unify-8859-on-decoding-mode' is used:
       1. Use "iso-8859-1" if no loss.
       2. Otherwise, use "utf-8".
  2. If `unify-8859-on-decoding-mode' is not used:
       1. If both ISO-8859-1 and ISO-8859-15 can be used with no loss,
          `mew-charset-latin' is used.
       2. Use "iso-8859-1" if no loss.
       3. Use "iso-8859-15" if no loss.
       4. Otherwise, use "utf-8".

The default value of `mew-charset-latin' is "iso-8859-15".  If you want
to set it to "iso-8859-1", configure like this:

     (setq mew-charset-latin "iso-8859-1")



File: mew.info, Node: highlight, Next: hooks, Prev: charset, Up: Customize

Highlighting
============

If `mew-use-highlight-mark' is `t', marked message are highlighted. The
default is `t'.

If `mew-use-highlight-header' is `t', the header of a message is
highlighted. The default is `t'.

If `mew-use-highlight-body' is `t', the body of a message is
highlighted. The default is `t'. The limit to be highlighted can be set
by `mew-highlight-body-max-size'. The default is 10000 bytes.

If `mew-use-highlight-url' is `t', a spell is casted to URL strings in a
message. So, when you move the cursor onto the URL, it is highlighted.
The default is `t'.

If `mew-use-cursor-mark' is `t', the mark specified `mew-cursor-mark' is
putted to the beginning of the current line.  The default is `nil'. The
default of `mew-cursor-mark' is ">".

If `mew-use-highlight-cursor-line' is `t', underline is put on the
cursor line in Summary mode. The default is `t'.

If `mew-use-highlight-mouse-line' is `t' on Emacs which supports mouse
highlight, the mouse line is painted in Summary mode. This is very
convenient to read messages clicking the middle button of the mouse. The
default value is `nil'.

If `mew-use-highlight-x-face' is `t' on Graphical Emacs, X-Face: in a
header is iconified in Message mode. The default value on Graphical
Emacs is `t'.



File: mew.info, Node: hooks, Next: pop, Prev: highlight, Up: Customize

Hooks
=====

Here is a summary of hooks used in Mew.

`mew-env-hook'
     Hook called at initialize time before setting environment.
`mew-init-hook'
     Hook called at initialize time.
`mew-summary-mode-hook'
     Hook called in Summary mode.
`mew-virtual-mode-hook'
     Hook called in Virtual mode.
`mew-thread-display-hook'
     Hook called after new threads are displayed.
`mew-header-mode-hook'
     Hook called in Header mode.
`mew-draft-mode-hook'
     Hook called in Draft mode.
`mew-draft-mode-newdraft-hook'
     Hook called in Draft mode only when new draft is prepared.
`mew-draft-mode-reedit-hook'
     Hook called in Draft mode when a message not in +draft is
     re-edited.
`mew-draft-mode-reedit-draft-hook'
     Hook called in Draft mode when a message in +draft is re-edited.
`mew-draft-mode-reedit-queue-hook'
     Hook called in Draft mode when a message in +queue or +postq is
     re-edited.
`mew-draft-mode-edit-again-hook'
     Hook called in Draft mode when a message returned with the old
     sytale is edited again.
`mew-message-mode-hook'
     Hook called in Message mode.
`mew-message-hook'
     Hook called whenever message displayed.
`mew-make-message-hook'
     Hook called before making a message in Draft mode. A good example
     is as follows: (add-hook 'mew-make-message-hook 'ispell-message)
`mew-send-hook'
     Hook called before sending/queuing an e-mail message in Draft mode.
     Note that this hook is called before composition of the message
`mew-post-hook'
     Hook called before posting/queuing a NetNews message in Draft mode.
     Note that this hook is called before composition of the message.
`mew-real-send-hook'
     Hook called before sending/queuing an e-mail message in Draft mode.
     Note that this hook is called after composition of the message.
`mew-real-post-hook'
     Hook called before sending/queuing a NetNews message in Draft mode.
     Note that this hook is called after composition of the message.
`mew-smtp-flush-hook'
     Hook called after the queue is flushed.
`mew-nntp2-flush-hook'
     Hook called after the postq is flushed.
`mew-smtp-sentinel-hook'
     Hook called when a SMTP process finished.
`mew-nntp-sentinel-hook'
     Hook called when a NNTP process to receive messages finished.
`mew-nntp2-sentinel-hook'
     Hook called when a NNTP process to post messages finished.
`mew-pop-sentinel-hook'
     Hook called when a POP process finished.
`mew-pop-sentinel-non-biff-hook'
     Hook called when a non-Biff POP process finished.
`mew-imap-sentinel-hook'
     Hook called when a NNTP process to post messages finished.
`mew-imap-sentinel-hook'
     Hook called when an IMAP process finished.
`mew-imap-sentinel-non-biff-hook'
     Hook called when a non-Biff IMAP process finished.
`mew-scan-sentinel-hook'
     Hook called when scan finished.
`mew-summary-ls-no-scan-hook'
     Hook called when mew-summary-ls does not scan a folder.
`mew-summary-exec-hook'
     Hook called when `x' in Summary mode finished.
`mew-sort-hook'
     Hook called when `S' in Summary mode finished.
`mew-pack-hook'
     Hook called when `O' in Summary mode finished.
`mew-summary-toggle-disp-msg-hook'
     Hook called when `v' in Summary finished.
`mew-syntax-format-hook'
     Hook called when mew-syntax-format is called.
`mew-addrbook-mode-hook'
     Hook called in Addrbook mode.
`mew-cite-hook'
     Hook for an external cite mechanism. If you want to use super-cite,
     (setq mew-cite-hook 'sc-cite-original).
`mew-before-cite-hook'
     Called in mew-summary-reply-with-citation before citation.
`mew-suspend-hook'
     Hook called on suspend.
`mew-quit-hook'
     Hook called on quit.

Here are some example configurations of hook

Draft mode evaluates `text-mode-hook' and `mew-draft-mode-hook' in
order. If you do not set `auto-fill-mode' to `text-mode-hook', It would
be useful to define `mew-draft-mode-hook' as follows:

     (setq mew-draft-mode-hook (function (lambda () (auto-fill-mode 1))))



File: mew.info, Node: pop, Next: imap, Prev: hooks, Up: Customize

POP
===

Mew can POP to retrieve messages. This section describes following
variables to control POP.

`mew-pop-server'
     The name of your POP server.
`mew-pop-ssh-server'
     The name of SSH server which forwards the POP3 port.
`mew-pop-ssl'
     If non-nil, POP connections are made over SSL.
`mew-pop-ssl-port'
     The port for POP over SSL.
`mew-pop-user'
     The user name on your POP server. The default is your login name.
`mew-pop-auth'
     The authentication method for POP3. 'pass means the authentication
     with USER/PASS (i.e. plain password). 'apop means the
     authentication with APOP. `t' means SASL according to
     `mew-pop-auth-list'. The default is 'apop.
`mew-pop-auth-list'
     A list of SASL methods in the preferred order.  Currently,
     "CRAM-MD5" can be used.
`mew-pop-delete'
     Wether or not delete messages on a POP server after retrieval by
     POP.  If `t', delete the messages. If `nil', retain the messages.
     If number N, delete the messages N days after the first access. The
     default is `t'.
`mew-pop-size'
     The limit size of messages to be retrieved by POP. The default is
     55296 byte. 0 means unlimited, so you can get all messages from the
     POP server. To know how to retrieve the rest of a truncated
     message, please refer to *Note retrieving::.
`mew-pop-body-lines'
     *The limit of body lines to get when the size of message exceeds
     `mew-pop-size'. The default is 40.
`mew-pop-header-only'
     Wether or not the body of a message is retrieved by POP.  If
     non-nil, only header is retrieved. The default is `nil'



File: mew.info, Node: imap, Next: nntp, Prev: pop, Up: Customize

IMAP
====

Mew can use IMAP to retrieve messages. This section describes following
variables to control IMAP.

`mew-imap-server'
     The name of your IMAP server.
`mew-imap-ssh-server'
     The name of SSH server which forwards the IMAP4 port.
`mew-imap-ssl'
     If non-nil, IMAP connections are made over SSL.
`mew-imap-ssl-port'
     The port for IMAP over SSL.
`mew-imap-user'
     The user name on the IMAP server. The default is your login name.
`mew-imap-auth'
     The authentication method for IMAP4. nil means the authentication
     with LOGIN (i.e. plain password). `t' means SASL according to
     `mew-imap-auth-list'. The default is `t'.
`mew-imap-auth-list'
     A list of SASL methods in the preferred order.  Currently,
     "CRAM-MD5" and "LOGIN" can be used.
`mew-imap-delete'
     Wether or not delete messages on an IMAP server after retrieval by
     IMAP. If `t', delete the messages. If `nil', retain the messages.
     If number N, delete the messages N days after the first access.
     Otherwise they are not deleted. The default is `t'.
`mew-imap-size'
     The limit size of messages to be retrieved by IMAP. The default is
     55296 byte. 0 means unlimited, so you can get all messages from the
     IMAP server. To know how to retrieve the rest of a truncated
     message, please refer to *Note retrieving::.
`mew-imap-header-only'
     Wether or not the body of a message is retrieved by IMAP. If
     non-nil, only header is retrieved. The default is `nil'



File: mew.info, Node: nntp, Next: smtp, Prev: imap, Up: Customize

NNTP
====

Mew uses NNTP to read/write News articles. This section describes
following variables to control NNTP.

`mew-nntp-server'
     The name of your NNTP server.
`mew-nntp-ssh-server'
     The name of SSH server which forwards the NNTP port.
`mew-nntp-ssl'
     If non-nil, NNTP connections are made over SSL.
`mew-nntp-ssl-port'
     The port for NNTP over SSL.
`mew-nntp-user'
     The user name on the NNTP server. If non-nil, authentication is
     used.
`mew-nntp-newsgroup'
     The name of default Newsgroup.
`mew-nntp-size'
     The limit size of messages to be retrieved by NNTP. The default is
     55296 byte. 0 means unlimited, so you can get all messages from the
     NNTP server.
`mew-nntp-header-only'
     Wether or not the body of a message is retrieved by NNTP. If
     non-nil, only header is retrieved.
`mew-nntp-msgid-user'
     A user name for creation of Message-Id:. If `nil', the value of
     `mew-user' is used. The default is `nil'.
`mew-nntp-msgid-domain'
     A domain name for creation of Message-Id:. If `nil', the value of
     `mew-mail-domain' is used. The default is `nil'.

A value of Message-Id: for NNTP is created by the following rule:

     message-id = *random*.nntp-msgid-user@nntp-msgid-domain



File: mew.info, Node: smtp, Next: config, Prev: nntp, Up: Customize

SMTP
====

Mew uses SMTP to send messages. This section describes following
variables to control SMTP.

`mew-smtp-server'
     The name of your SMTP server.
`mew-smtp-ssh-server'
     The name of SSH server which forwards the SMTP port.
`mew-smtp-ssl'
     If non-nil, SMTP connections are made over SSL.
`mew-smtp-ssl-port'
     The port for SMTP over SSL.
`mew-smtp-user'
     The user name on your SMTP server. If non-nil, authentication is
     used.
`mew-smtp-auth-list'
     A list of SMTP AUTH methods in the preferred order.  Currently,
     "CRAM-MD5", "PLAIN", and "LOGIN" can be used.
`mew-smtp-helo-domain'
     An e-mail domain to tell a SMTP server with HELO/EHLO. The default
     is "localhost".
`mew-smtp-mail-from'
     The default is `nil'. An e-mail address to tell a SMTP server with
     MAIL FROM:. If nil, an address specified by the From: field is
     used.
`mew-smtp-msgid-user'
     A user name for creation of Message-Id:. If `nil', the value of
     `mew-user' is used. The default is `nil'.
`mew-smtp-msgid-domain'
     A domain name for creation of Message-Id:. If `nil', the value of
     `mew-mail-domain' is used. The default is `nil'.
`mew-use-8bit'
     Whether or not send 8bit text without MIME encoding. If `nil', an
     appropriate MIME encoding is applied. The default is `nil'.

A value of Message-Id: for SMTP is created by the following rule:

     message-id = *random*.smtp-msgid-user@smtp-msgid-domain



File: mew.info, Node: config, Next: custom-misc, Prev: smtp, Up: Customize

Changing receiving/sending behavior
===================================

With `mew-config-alist', you can differ actions of sending/receiving
messages. Let's look at the following example:

     (setq mew-config-alist
           '(("home"
              ("inbox-folder"   . "+inbox-home")
              ("pop-server"     . "pop.iij4u.or.jp"))
             ("ext"
              ("pop-ssh-server" . "ssh.mew.org"))
             ("default"
              ("proto"          . "%")
              ("imap-server"    . "imap.mew.org")
              ("pop-server"     . "pop.mew.org"))))

This example defines three cases: "home", "ext", "default". For each
case, some pair of key and value are defined.

We explain the semantics of `mew-config-alist' with this example.  If
the case is "home", looking up "pop-server" results in
"pop.iij4u.or.jp". If the case is "ext", looking up "pop-server" results
in "pop.mew.org" since there is no specified key for the case and the
"default" is used. If the case is "default", looking up "pop-server"
results in "pop.mew.org".

If the case is "home", looking up "inbox-folder" results in
"+inbox-home". If the case is "ext", looking up "inbox-folder" results
in the value of `mew-inbox-folder' since there is no specified key for
both "ext" and "default".  If the case is "default", looking up
"inbox-folder" also results in the value of `mew-inbox-folder'.

"proto" (`mew-proto') is used to specify a folder which is selected when
you type `M-x mew'. (If you input `M-x mew' when Mew is not executed,
""proto" for the "default" case is used. If you type `M-x mew' when Mew
is running, "proto" is chosen according to the value of the receiving
case.

Candidates of the value are "+", "$", "%", and "-". These means
"+inbox", "$inbox", "%inbox", "-fj.mail.reader.mew" without any special
configuration.

Each key which can be specified in `mew-config-alist' corresponds to the
variable `mew-"key"'. The following list enumerates such keys.

     "name", "user", "mail-domain", 
     "cc", "fcc", "dcc", "reply-to", "organization", "header-alist", 
     "mailbox-type", "mbox-command", "mbox-command-arg",
     "inbox-folder", "queue-folder", "postq-folder", 
     "signature-file", "content-type", 
     "smtp-server", "smtp-port", "smtp-ssh-server", 
     "smtp-ssl", "smtp-ssl-port", 
     "smtp-user", "smtp-auth-list", 
     "smtp-msgid-user", "smtp-msgid-domain", 
     "smtp-helo-domain", "smtp-mail-from", 
     "pop-server", "pop-port", "pop-ssh-server", 
     "pop-ssl", "pop-ssl-port", 
     "pop-user", "pop-auth", "pop-auth-list", 
     "pop-size", "pop-header-only", "pop-delete", "pop-body-lines",
     "imap-server", "imap-port", "imap-ssh-server", 
     "imap-ssl", "imap-ssl-port", 
     "imap-user", "imap-auth", "imap-auth-list", 
     "imap-size", "imap-delete", "imap-header-only", 
     "imap-queue-folder", 
     "nntp-server", "nntp-port", "nntp-ssh-server", 
     "nntp-ssl", "nntp-ssl-port", 
     "nntp-user", "nntp-size", "nntp-header-only", 
     "nntp-msgid-user", "nntp-msgid-domain", 
     "proto"

A value for From: is made of "name", "user", "mail-domain" according to
the following rule:

     from = name <user@mail-domain>

Unless you set `mew-from-list' by yourself, `mew-from-list' is
automatically set collecting "from" for each case according to the rule
above. See *Note cheader::.

Cases configured in `mew-config-alist' can be specified to the receiving
case and the sending case. When Mew boots up, both the receiving case
and the sending case are "default".

If you want to change both the receiving case and the sending case, type
`C'. You can input a case with completion.

If you set `mew-case-synchronize' to `nil', you can specify the
receiving case and the sending case independently. With this
configuration, `C' is for the receiving case and `C-uC' is for the
sending case.

If one of the cases or both are not "default", they are displayed in the
mode line of Summary mode. The following is an example where the
receiving case is "home" and the sending case is "ext".

     (Summary home:ext)


In Draft mode, if the sending case is not "default", the value is
displayed in mode line. The following is an example that the sending
case is "home".

     (Draft home)

To change the sending case of a draft in Draft mode, use `C-cC-o'.  Its
header is dynamically modified according to the value of the
"mail-domain" key and the "header-alist" key. Note that the sending case
is a local variable of the Draft mode.

You can automatically set the sending case in Draft mode.

`mew-case-guess-when-prepared'
     If this variable is `t', the sending case is automatically guessed
     according `mew-case-guess-alist' when a draft is prepared. The
     default is `t'.
`mew-case-guess-when-composed'
     If this variable is `t', the sending case is automatically guessed
     according `mew-case-guess-alist' when a message is composed. The
     default is `nil'.  The default is `nil'
`mew-case-guess-when-replied'
     If this variable is `t', the sending case is automatically guessed
     according `mew-case-guess-alist' when a draft is prepared by
     replying. The default is `t'.

The syntax of `mew-case-guess-alist' and
`mew-case-guess-when-replied-alist' is the same as
`mew-refile-guess-alist'. For more information, please refer to *Note
by-alist::.


The following is a summary of commands concerned with case.

`C'
     In Summary mode, set the receiving case or both cases.  If
     `mew-case-synchronize' is `t' (this is default), set both cases. If
     `nil', set the receiving case only.
`C-uC'
     In Summary mode, set the sending case or both cases.  If
     `mew-case-synchronize' is `t', set both cases. If `nil', set the
     sending case only.
`C-cC-o'
     In Draft mode, set the sending case of a draft.



File: mew.info, Node: custom-misc, Next: Convention, Prev: config, Up: Customize

Miscellaneous
=============

In a certain environment, it would be useful to encode a file with SAMBA
encoding when saving an attached file. For this, set
`mew-use-samba-encoding' to `t'. You can set `mew-cs-samba' to a
character set for the file name. The default is `shift_jis'.





File: mew.info, Node: Convention, Next: Implementation, Prev: custom-misc, Up: Top

E-mail convention
*****************

When you exchange messages with other people, you should obey minimum
manner. It gives a bad impression to the people if you violate the
manner since such messages are hard to read. We always should try to
write concise yet comprehensive explanations and make an effort to make
receivers well-understood.

We should take good care of the following items.

Fill To: and Cc: fields precisely
     To: is for target receivers and Cc: is for those who are received
     for their information. If his address is not on To:, he might skip
     to read the message. We should take care not to deliver to wrong
     people by mistaking the addresses.

The number of addresses To: and Cc: should be small
     It is discouraged to specify a lot of mail addresses on To: and
     Cc:. You should create a mailing-list instead. Or, if necessary,
     you should make the destination anonymous (*Note anonymous::).

Write a short and clear summary of body in Subject:
     There are people who decide to read contents from their
     Subject:. So, they might skip messages with improper Subject:. We
     should not write a long subject since it is hard to read.

Carriage return means end of line and null line expresses end of paragraph. One line should be limited to 70 characters or so.
     It is very hard to read if you write a message on every other line
     or in a long line without folding. Especially long lines are
     trouble to cite. Some people write a message with indent but it is
     meaningless. Text is displayed differently on each machines, so
     even if the layout is excellent on your machine, it might not be so
     on other machines.

Cite only necessary sentences
     You should not bother to remove unnecessary sentences. With Mew,
     citation must be a piece of cake.

Make your signature simple
     A long signature is just self-satisfaction.

Do not send prank messages
     I do not want to warn this kind of stuff. Nonetheless, someone
     sends Happy or Unhappy messages to others. You should understand
     that people doubt your character.

Attach data files that the receivers can read
     It is text only that you can send without any agreement with the
     receivers. If you want to send data files other than text, you
     should make an agreement with the receivers. To mailing-list, you
     should send text only.


If you wish to learn manner on the Internet more comprehensively, please
refer to RFC1855.




