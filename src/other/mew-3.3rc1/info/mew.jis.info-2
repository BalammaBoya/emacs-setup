Info file: mew.jis.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `mew.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.






INFO-DIR-SECTION Message User Agent
START-INFO-DIR-ENTRY
* Mew-J: (mew.jis.info).     Messaging in the Emacs World.
END-INFO-DIR-ENTRY







File: mew.jis.info, Node: forward, Next: resend, Prev: reply, Up: Composing

メッセージの転送
================

メッセージを転送するには、Summary モードで `f' や `F' を利用します。する
と、Draft モードに移行し、あらかじめメッセージが添付領域に添付された草稿
が準備されます。

また Draft モードで添付領域を用意し、メッセージをコピー(`c')したりメッセー
ジにリンク(`l')を張ったりしても、メッセージを転送できます。ファイル名が
数字([0-9]+)の場合は、自動的にメッセージだと判断されます。また、添付領域
で `y' を使うと、Message モードに表示しているメッセージにリンクを張るの
で便利です。

通常は添付したメッセージの全体が転送されます。もし、ヘッダの一部を削りた
い場合は、`mew-field-delete-for-forwarding' を定義して下さい。以下に 
"Received:" と "Return-Path:" を転送時に削るための設定例を示します。

     (setq mew-field-delete-for-forwarding '("Received:" "Return-Path:"))



File: mew.jis.info, Node: resend, Next: pgp-shortcut, Prev: forward, Up: Composing

メッセージの再送
================

メッセージのヘッダの一部のみを変更して、送信したい場合があります。

たとえば、同じ内容のメッセージを、複数の宛先に独立して送りたい場合です。
pooh 宛のメッセージを作成して、+queue に入れ、すぐさまそのメッセージをコ
ピーし、宛先だけを piglet に変更したい場合を想像して下さい。これを、メッ
セージの再利用による送信と呼びましょう。

また、メッセージに Resent-To: というフィールドを付けて再送したいこともあ
ります。これは、転送の一種です。こちらはヘッダだけ書き直すので、ヘッダ変
換といいます。前節で説明した転送は、メッセージを新規のメッセージに包み込
んで転送するため、カプセル化と呼ばれています。

ヘッダの一部だけを編集し、メッセージを送信したり、キューに入れたりするモー
ドとして、Header モードが用意されています。本文が編集できない Draft モー
ドだと思えばいいでしょう。

Header モードに入るために、Summary モードには以下のコマンドが用意されて
います。

`W'
     メッセージの再利用による送信。対象となるメッセージの To:、Cc:、
     From: などを書き換えるために、Header モードに移行する。典型的には、
     +queue または +postq に入っているメッセージに対して利用する。
`r'
     メッセージの再送。対象となるメッセージのヘッダに、Resent-To:、
     Resent-Cc:、Resent-From: などを追加するために、Header モードに移行
     する。再送によるメッセージの転送は、受信者を混乱させることがあるの
     で、よく考えてから利用すること。

Header モードでは、Draft モードのように、補完や循環的な補完が利用できま
す。ヘッダの入力が終わったら、以下のいずれかのコマンドを用いて、メッセー
ジを送信して下さい。本文が表示されていないので不安かもしれませんが、ちゃ
んと対象となっているメッセージの本文とヘッダの一部が再利用されます。

`C-cC-m'
     メッセージを作成し +queue または +postq に入れ、送信待ち状態にする。
`C-cC-c'
     メッセージを作成し送信する。"Really send this message? (y or n) " 
     と訊かる。`y' を押せば送信される。



File: mew.jis.info, Node: pgp-shortcut, Next: mark-b-comp, Prev: resend, Up: Composing

PGP を利用する
==============

ここでは、テキストである本文を PGP で署名したり暗号化したりする方法につ
いて説明します。紹介するコマンドは以下の通りです。

`C-cC-s'
     草稿全体を PGP で署名する。パスフレーズを入力すること。
`C-cC-e'
     草稿全体を PGP で暗号化する。
`C-cC-b'
     草稿全体を PGP で署名後暗号化する。パスフレーズを入力すること。
`C-cC-r'
     草稿全体を PGP で暗号化後署名する。パスフレーズを入力すること。

メッセージを暗号化するには受信者の公開鍵を使用します。逆に署名するには自
分の秘密鍵を使います。よって、署名するためにはパスフレーズを入力する必要
があります。ただし、パスフレーズの保存機能を使っており、パスフレーズが保
存されている場合は、パスフレーズを入力する必要はありません(*Note
pgp-viewing::)。

これらは、次節で説明するマークを使った PGP/MIME の作成方法の省略方法に当
たります。

Mew で PGP を使うためには、PGP の userid としてアドレスを選ぶ必要があり
ます(例 "Kazuhiko Yamamoto <kazu@mew.org>")。

メッセージに署名を施すには、`C-cC-s' と入力します。署名の際には、自分の
秘密鍵を復号化する必要がありますので、パスフレーズがキャッシュされていな
ければ、入力を促されます。署名が施されたメッセージは、+queue または
+postq に格納されます。

自分の秘密鍵は、From: にあるアドレスを元に特定されます。From: がない場合
は、PGP が自動的にデフォルトの秘密鍵を選択します。From: にあるアドレスと
は違うアドレスで秘密鍵を指定したい場合は、`C-uC-cC-s' と入力して下さい。

メッセージを暗号化するには、`C-cC-e' とタイプして下さい。To: や Cc: から
アドレスを切り出して、その受信者が復号化できるよう暗号化します。暗号化す
るだけのなので、パスフレーズを訊かれることはありません。作成されたメッセー
ジは、+queue に格納されます。

このメッセージは、受信者の公開鍵に加えて、自分の公開鍵でも暗号化されてい
ます。ですから、作成したメッセージを復号化できます。たとえば、`g' で 
+queue に移動し、念のため復号化して確認することが可能です。

署名後暗号化するには、`C-cC-b' と入力します。暗号化後署名するには、
`C-cC-r' とタイプします。どちらの場合も作成されたメッセージは、+queue に
蓄えられます。

PGP で署名を施したり、暗号化したりしてメッセージを送ろうと思っていても、
うっかり忘れることがあります。そのため、メッセージを作成するコマンド 
`C-cC-m' や `C-cC-c' に対し、必要に応じて PGP を起動させる機能があります。

作成するすべてのメッセージのプライバシを保護したいなら、
`mew-protect-privacy-always' を `t' にして、
`mew-protect-privacy-always-type' に利用したいサービスを設定します。

暗号化されたメッセージに対する返答メッセージのプライバシを保護したいなら、
`mew-protect-privacy-encrypted' を `t' にして、
`mew-protect-privacy-encrypted-type' に利用したいサービスを設定します。
この設定は、暗号化されたメッセージへの返答する場合、上記のすべてのメール
に対する設定よりも優先されます。

以下に利用できるサービスを示します。かっこ内はそれぞれのサービスを表すシ
ンボルです。`C-cC-m' や `C-cC-c' と入力する際に利用されるサービスは、モー
ドラインに表示されます。

pgp-signature (PS)
     署名
pgp-encryption (PE)
     暗号化
pgp-signature-encryption (PSPE)
     署名後暗号化
pgp-encryption-signature (PEPS)
     暗号化後署名

以下の例は、すべてのメッセージに対し署名する設定です。

     (setq mew-protect-privacy-always t)
     (setq mew-protect-privacy-always-type 'pgp-signature)

以下の例は、暗号化されたメッセージへの返答メッセージに対し、暗号化する設
定です。

     (setq mew-protect-privacy-encrypted t)
     (setq mew-protect-privacy-encrypted-type 'pgp-encryption)

Draft モードでは、`C-cC-pC-a' で `mew-protect-privacy-always'、
`C-cC-pC-e' で `mew-protect-privacy-encrypted' の値を反転できます。

Draft モードにおいて現在書いている草稿対してのみあらかじめサービスを指定
しておき、送信時にサービスを施すことを忘れないようにできます。現在の草稿
に対し `C-cC-m' や `C-cC-c' で施されるサービスを指定するには、 
`C-cC-pC-d' に続いて上記のサービスの 1 つを入力して下さい。現在のサービ
スをキャンセルするには、サービス名の代りに単に `RET' を押して下さい。

`C-cC-c' や `C-cC-m' でメッセージを作成する際、署名や暗号化に失敗したら、
草稿に戻ります。このとき指定していたサービスはキャンセルされます。続けて 
`C-cC-c' や `C-cC-m' でメッセージを作成すると、普通のメッセージが作成さ
れるので気をつけて下さい。問題を取り除いた後、同じサービスを望むなら、明
示的に `C-cC-pC-d' でサービスを指定するか、`C-cC-s'、`C-cC-e' などを用い
て下さい。



File: mew.jis.info, Node: mark-b-comp, Next: pgp-key, Prev: pgp-shortcut, Up: Composing

マークを使った PGP/MIME の作成
==============================

PGP/MIME をサポートするために、マークを使った作成方法が提供されています。
以前の例を思い出してみましょう。

     ----------------------------- attachments -----------------------------
           Multipart/Mixed                                         1/     
          1  Text/Plain(guess)                                       CoverPage*
     B    2  Image/Gif                    MagicPoint のロゴ          mgp.gif
     Q    3  Application/Postscript       資料                       ohp.ps
          4                                                          . 
     --------0-1-2-3-4-5-6-7-8-9--------------------------------------------

行頭に `B' や `Q' といったマークがあります。このマークは符号化を意味して
います。Mew では、新しい概念「符号化」を導入しています。符号化には、
Base64, Quoted-Printable, Gzip64 (Gzip + Base64), PGP で署名, PGP で暗号
化などがあります。

現在次の 6 つのマークがサポートされています。

`" "'
     符号化しない。ただし、8ビットのテキストは符号化されるかもしれない。
`B'
     Base64
`Q'
     Quoted-Printable
`G'
     Gzip64(gzip 圧縮し Base64 で符号化する。Mew が実験的に採用している。
     相手が Mew を使っていない場合は、使用すべきではない。)
`PS'
     PGP で電子署名。
`PE'
     PGP で暗号化。

添付領域でのマークに関係する新しいキー割当は以下の通りです。

`B'
     Base64 で符号化するため `B' マークを付ける。
`Q'
     Quoted-Printable で符号化するため `Q' マークを付ける。
`G'
     Gzip64 で符号化するため `G' マークを付ける。ただし、Text/Plain と 
     Application/Postscript でしか実行できない。これ以外の型には圧縮は無
     意味である。なぜなら、jpeg などはあらかじめ圧縮されているから。
`S'
     PGP で署名するため `PS' マークを付ける。
`E'
     PGP で暗号化するため `PE' マークを付ける。受信者のアドレスを入力す
     る。
`U'
     符号化を元に戻す。元々のマークに戻る。

次の例を考えてみましょう。パート 2 は PGP で署名され、"kazu" 用に PGP で
暗号化されます。安心して下さい。説明の部分は上書きされていますが、保存さ
れています。パート 3 は Gzip64 で符号化されます。

     ----------------------------- attachments -----------------------------
           Multipart/Mixed                                         1/
          1  Text/Plain(guess)                                       CoverPage*
     PSPE 2  Image/Gif                    kazu@mew.org               mgp.gif
     G    3  Application/Postscript       資料                       ohp.ps
          4                                                          .
     --------0-1-2-3-4-5-6-7-8-9--------------------------------------------

マークを付けた後は、`C-cC-m' や `C-cC-c' を使って、PGP/MIME を作成して下
さい。



File: mew.jis.info, Node: pgp-key, Next: anonymous, Prev: mark-b-comp, Up: Composing

PGP の鍵の配布
==============

PGP の公開鍵を配布するには、Draft モードの添付領域で `p' を押して下さい。
だれの公開鍵を配布するか尋ねられます。自分の公開鍵であれば、単に `RET' 
と入力して下さい。他人の公開鍵であれば、補完を利用しながらその人のアドレ
スを入力して下さい。PGP の公開鍵は、Application/Pgp-Keys というデータ型
で配送されます。

Summary モード、あるいは、Virtual モードでメッセージを読んでいる際に、あ
るパートのデータ型が Application/Pgp-Keys であれば、Mew は PGP の公開鍵
リングにそれを登録しようとします。Mew は、「信用度」と「有効性」を全く考
慮しないことに注意して下さい。これらの値を設定するのは、あなた自身です。
設定は Mew が表示する説明に従って下さい。。もし、「信用度」と「有効性」
の意味が分からなければ、PGP を使って自分のプライバシを保護しようとする前
に、PGP が提供する「信用の輪」とは何かを学ぶべきです。



File: mew.jis.info, Node: anonymous, Next: Marks, Prev: pgp-key, Up: Composing

宛先を匿名にしたメッセージの送信
================================

宛先を匿名にして、複数の受信者にメッセージを送信したいことがあります。

たとえば、pooh がパーティーへのお誘いを複数の友達に送ることを考えて下さ
い。パーティーへ参加するという piglet からの返事は、pooh のみに送るべき
です。しかし、To: にたくさんの友達を列挙していると、piglet は誤って多く
の人に返答を送りつけてしまうかもしれません。そもそも、pooh は誰を誘った
のか、当日までふせておきたいこともあるでしょう。

このような要望を実現するために、Mew では匿名の宛先として、":;" を利用し
ます。以下の例を見て下さい。

     To: party:piglet@beech.tree.uk,roo@beech.tree.uk;
     From: Pooh <winnie-the-pooh@100acre.woodwest.uk>

"party" という説明文字列の後に ":" があります。そして、いくつかアドレス
が "," で区切られながら列挙され、";" で終端されています。このような形式
でアドレスを書くと、Mew は ":" と ";" のアドレスにメッセージを届けますが、
ヘッダからは削り取ります。この例では、piglet と roo は以下のようなメッセー
ジを受け取ります。

     To: party:;
     From: Pooh <winnie-the-pooh@100acre.woodwest.uk>

受信者はこのヘッダから、送信者は pooh であることは分かりますが、自分以外
の誰に送られたのかは、想像するほかありません。また、"party:;" という文字
列は、アドレスではありませんから、ここに返答することも不可能です。

なお、To: や Cc: にたくさんのアドレスを列挙することは、本質的によいこと
ではありません。特定の人にメッセージを何度も送信する機会があるなら、通常
メーリングリストを作成します。




File: mew.jis.info, Node: Marks, Next: delete mark, Prev: anonymous, Up: Top

愉快なマークたち
****************

ここでは、Summary モードでユーザが付けたり消したりできるマークについて説
明します。このマークは以下のように、数字の右に付きます。(Mew が付けるマー
クは日付の左に付くことに注意。)

         1D 07/17 いとぢゅん     Re: N+I 2001 Tokyo IPv6 ShowCase
         2o 07/18 歌代先生       神田和泉屋
         3* 07/19 のむさん       refile info.

現在利用できるマークは以下の5つです。

`D'
`X'
     消去のマーク。
`o'
     整頓、つまり、フォルダを移動させるマーク。
`@'
     複数のメッセージを一度に扱うためのマーク。
`*'
     後から読み返すためのマーク。

以下それぞれについて説明します。また、Mew が表示するマークについてもまと
めます。

* Menu:

* delete mark::                 消去 `D'、`X'
* refile mark::                 整頓 `o'
* multi mark::                  一括 `@'
* review mark::                 復習 `*'
* unmark::                      マークの消去
* mark level::                  マークの変換
* off-line::                    マークのオフライン処理
* mew-mark::                    Mew が表示するマーク



File: mew.jis.info, Node: delete mark, Next: refile mark, Prev: Marks, Up: Marks

消去 `D'、`X'
=============

メッセージを消去するには、まず Summary モードで `d' を押して、`D' マーク
を付けます。マークを付けただけでは何も起こらないので、間違って `d' を押
しても大丈夫です。デフォルトでは、`x' を押すと `D' マークの付いたメッセー
ジが +trash フォルダに移動します。

+trash フォルダ内のメッセージを実際に消去するには、デフォルトでは以下の 
2 つの方法があります。

  1. Summary モードで `D' を実行する。
  2. +trash フォルダ内で `D' マークを付けて、`x' を押す。

これまでしつこいように「デフォルトでは」と念を押してきました。ここでいう
デフォルトとは、`mew-msg-rm-policy' が`'trashonly' であるということです。
`mew-msg-rm-policy' は以下のような値をとれます。それぞれの説明は `x' を
押した際の動作についてです。

`'totrash'
     +trash フォルダ以外のフォルダでは、`D'マークの付いたメッセージが 
     +trash フォルダに移動する。+trash フォルダでは単にマークが消える。
`'always'
     `D' マークの付いたメッセージは実際に消去される。
`'trashonly'
     +trash フォルダの `D' マークの付いたメッセージは、実際に消去される。
     それ以外のフォルダにある `D' マークの付いたメッセージは、+trash フォ
     ルダに移動する。
`'uselist'
     `mew-msg-rm-folder-list' で指定されたフォルダの `D' マークの付いた
     メッセージは、実際に消去される。それ以外のフォルダにある `D' マーク
     の付いたメッセージは、+trash フォルダに移動する。
`それ以外'
     `'totrash' と同様に扱われる。

自分の好きなように `x' の動作をカスタマイズして下さい。

すべての `*' マークを `D' に変換できれば、一度にたくさんの `D' マークを
付けれて便利です。これには、`md' を利用して下さい。

`D' マークに似たものに `X' マークがあります。このマークの付けられたメッ
セージは、`mew-msg-rm-policy' の値が何であれ、`x' を押した際に実際に消去
されます。`X' マークは、`M-d' で付けることができます。

以下に、`D' マークと `X' マークに関するコマンドをまとめます。

`d'
     `D' マークを付ける。
`M-d'
     `X' マークを付ける。
`x'
     `D' マークの付いたメッセージを `mew-msg-rm-policy' に従って処理する。
     また、`X' マークの付いたメッセージを消去する。
`mxd'
     `D' マークの付いたメッセージのみを `mew-msg-rm-policy' に従って処理
     する。
`mxM-d'
     `X' マークの付いたメッセージのみを消去する。
`D'
     +trash フォルダのメッセージを全部消去する。
`C-uD'
     指定されたフォルダのメッセージを全部消去する。



File: mew.jis.info, Node: refile mark, Next: multi mark, Prev: delete mark, Up: Marks

整頓 `o'
========

メッセージを整頓するには `o' を押して、移動先のフォルダを入力し、`o' マー
クを付けます。移動先のフォルダは、賢く推測してくれるので、ほどんどの場合
はフォルダ名を入力する代わりに `RET' を押すだけです。"," で区切って複数
のフォルダを入力することもできます。もちろん、`TAB' で補完できます。詳し
くは *Note Refile:: を参照して下さい。

`o' マークの付いたメッセージの上で `o' を押すと、移動先を追加したり変更
したりできます。また、実際の移動は `x' と入力されたときに実行されます。

複数のフォルダを指定し、移動させたときのことを考えましょう。ハードリンク
の機能を持つファイルシステムを使っている場合、そのメッセージは最初のフォ
ルダに移動され、その他のフォルダからはハードリンクが張られます。そうでな
いファイルシステムの場合は、最初のフォルダに移動後、その他のフォルダへ複
製されます。

指定したフォルダが 1 つで、しかもそれが現在のフォルダである場合、整頓し
てもなにも起こりません。指定したフォルダが複数で、現在のフォルダが含まれ
る場合、現在のフォルダ内での番号を保ったまま、その他のフォルダからハード
リンクが張られるか、その他のフォルダへ複製されます。

`o' に似ていますが、かならず現在のフォルダも候補として提示する`c' という
コマンドも用意されています。

以下に、`o' マークに関するコマンドをまとめます。

`o'
     `o' マークを付ける。
`c'
     `o' マークを付ける。推測したフォルダに加えて、現在のフォルダも候補
     として提示する。
`x'
     `o' マークの付いたメッセージを移動させる。
`mxo'
     `o' マークの付いたメッセージのみを移動させる。他のマークは処理しな
     い。



File: mew.jis.info, Node: multi mark, Next: review mark, Prev: refile mark, Up: Marks

一括 `@'
========

複数のメッセージを一度に取り扱うためには、`@' マークを付けます。`@' マー
クが付いた単数／複数のメッセージを取り扱うコマンドは以下の通りです。

`@'
     `@' マークを付ける。
`F'
     `@' マークの付いたメッセージを MIME 形式で転送するための草稿を準備。
`M-s'
     `@' マークの付いたメッセージを "unshar" の入力として渡す。つまり、
     shar (の後に split)されたデータを取り出す。
`M-t'
     `@' マークの付いたメッセージを "uumerge" の入力として渡す。つまり、
     uuencode (の後に split)されたデータを取り出す。
`M-b'
     `@' マークの付いたメッセージに格納されているメッセージを取り出す。
`M-\'
     `@' マークの付いたメッセージを引数として、外部コマンドを起動する。
`J'
     大きなメッセージは Message/Partial として複数に分割されている場合が
     ある。これらのメッセージには、Mew によって `P' マークが付けられてい
     る。ここで、ユーザがそれらのメッセージに `@' マークを付け、このコマ
     ンドを実行すれば、元のメッセージが復元される。

`M-s' や `M-t' では、`@' マークの付いたメッセージの番号がきちんと分割順
になっている必要があります(番号はとびとびでも構いません)。ちゃんと順番に
なってないなら、`S' でソートするとよいかもしれません。



File: mew.jis.info, Node: review mark, Next: unmark, Prev: multi mark, Up: Marks

復習 `*'
========

後から読み返したいメッセージには、`*' で `*' マークを付けて下さい。また、
選択コマンド `?' を使うと、入力した条件にマッチするメッセージに`*' マー
クが付きます(詳しくは、*Note Pick:: を参照して下さい)。`N' や `P' で `*' 
マークの付いたメッセージに移動し表示できます。

以下に、`*' に関連するコマンドを示します。

`*'
     `*' マークを付ける。
`N'
     下方向の `*' マークの付いたメッセージへ移動し表示。
`P'
     上方向の `*' マークの付いたメッセージへ移動し表示。
`M-n'
     下方向の `*' マークの付いたメッセージへ移動しキーワードをハイライト
     して表示。このコマンドを繰り返し利用すると、キーワードの付近がが次々
     と表示されていく。キーワードは、そのバッファに固有な値として管理さ
     れており、`C-u?' や `C-u/' (*Note Pick:: を参照) を利用すると設定さ
     れる。キーワードが設定されていないなら、ユーザにキーワードを訊く。
`C-uM-n'
     キーワードを明示的に設定できること以外は、`M-n' に同じ。
`M-p'
     `M-n' を逆方向にしたコマンド。
`C-uM-p'
     `C-uM-n' を逆方向にしたコマンド。
`ma'
     マークの付いていないメッセージすべてに `*' マークを付ける。
`mr'
     入力した正規表現にマッチしたメッセージに `*' マークを付ける。
`mI'
     `*' マークの付いている一部だけが取得されたメッセージ群(`T')を取得す
     る。`mew-pop-delete' の値が `t' なら、メールボックスのメッセージ群
     は削除する。
`C-umI'
     `mI' を実行する。`mew-pop-delete' の値が `t' 以外なら、メールボック
     スのメッセージ群は削除する。



File: mew.jis.info, Node: unmark, Next: mark level, Prev: review mark, Up: Marks

マークの消去
============

`o' マークや `D' マークが付いたメッセージは、マーク実行コマンド `x' を押
さない限り処理されません。よって、`x' を押す前に、マークを取り止めるコマ
ンド `u' でマークを消せば、誤ってメッセージを消すことはありません。

以下にマークを消去するコマンドをまとめます。

`u'
     現在のメッセージのマークを消す。
`U'
     入力したマークが付いているすべてのメッセージのマークを消す。



File: mew.jis.info, Node: mark level, Next: off-line, Prev: unmark, Up: Marks

マークの変換
============

マークには「強いマーク」と「弱いマーク」があります。同じレベルのマークは
上書きできます。強いマークは弱いマークを上書きできます。

マークを付けた際の動作は、以下の通りです。

強いマーク :: `o'、`D'、`X'
     新たにマークしたときは、次のメッセージを表示。上書きした場合は、そ
     の行に留まる。
弱いマーク :: `*' と `@'
     常にその行に留まる。

強いマークを付けた後にカーソルが動く方向については、*Note summary-mode:: 
を参照して下さい。

マークは以下のように交換できます。

`m@'
     `*' -> `@' :: 選択コマンド `?' で選び、"uumerge" を起動するコマンド 
     `M-t' を利用する場合に便利。
`m*'
     `@' -> `*'
`ms'
     `@' <-> `*'
`md'
     `*' -> `D' :: 選択コマンド `?' で選んだメッセージを消去するときに便
     利。
`mM-d'
     `*' -> `X' :: 選択コマンド `?' で選んだメッセージを消去するときに便
     利。
`mo'
     `*' -> `o' :: 選択コマンド `?' で選んだメッセージをあるフォルダに移
     動させる場合に便利。
`mc'
     `*' -> `o' :: 選択コマンド `?' で選んだメッセージをあるフォルダにコ
     ピーする場合に便利。



File: mew.jis.info, Node: off-line, Next: mew-mark, Prev: mark level, Up: Top

マークのオフライン処理
**********************

IMAP ユーザは、フォルダ A のメッセージをキャッシュし、出先で `o' マーク
や `D' マークを付け、その場でそれらのマークを処理したくなることがありま
す。この場合、その後ネットワークに接続したときに、それらの処理が IMAP サー
バに反映されて欲しいと思います。

通常 IMAP では、メッセージをフォルダ A からフォルダ B へ移動させた場合、
フォルダ A にキャッシュされているそのメッセージを削除し、IMAP サーバから
ネットワークを通じ、フォルダ B へそのメッセージをキャッシュし直す必要が
あります。なぜなら、フォルダ A にキャッシュされているメッセージに付随す
る IMAP の情報は、フォルダ A 内でのみ有効だからです。

出先でフォルダ A のメッセージをフォルダ B へ整理したとしましょう。仮に、
そのメッセージをフォルダ B で読むためには、ネットワークに接続してその処
理を IMAP サーバに反映し、IMAP サーバから取り直さないといけないとすると
不便です。欲を言えば、出先でフォルダ B へ整理したメッセージは、IMAP サー
バから取り直さなくとも、フォルダ B へ移動すれば読めるようになっていて欲
しいと思います。

Mew では、メッセージ処理を後から IMAP サーバへ反映することと、IMAP サー
バからメッセージを再取得しなくても移動先のフォルダでメッセージを読めるこ
との両方を実現しています。ネットワークに接続していない状況で、マークを処
理するには、`lx' を使用して下さい。`lx' を実行すると、以下の処理がなされ
ます。

  1. `o' マークや `D' マークのついたメッセージがフォルダ A からなくなる。
  2. この処理はメッセージ形式で、%queue に溜る。
  3. `o' マークのついたメッセージは、ローカルでフォルダ B へ移動され、無
     効なメッセージとして扱われる。

無効なメッセージとは、読むことはできるが、`o' マークや `D' マークをつけ
られないものをいいます。無効なメッセージは、番号が "0" から始まります。
`g' を使って、フォルダ B へ行くと、無効なメッセージの一覧が自動的に表示
されます。

ネットワークに接続た後に、%queue に溜っている処理を IMAP サーバに反映さ
せるには、%queue で `C-cC-c' と入力して下さい。

IMAP サーバに処理を反映した後に、フォルダ B で `s' を押すと、無効なメッ
セージが削除され、有効なメッセージがキャッシュされます。



File: mew.jis.info, Node: mew-mark, Next: Refile, Prev: off-line, Up: Top

Mew が表示するマーク
********************

以下に Mew が表示するマークをまとめます。

`M'
     マルチパートを表すマーク。*Note multipart::を参照のこと。
`T'
     メッセージが切り詰められたことを表すマーク。*Note retrieving::を参
     照のこと。
`S'
     署名を表すマーク。*Note pgp-viewing::を参照のこと。
`E'
     暗号を表すマーク。*Note pgp-viewing::を参照のこと。
`P'
     分割されていることを示すマーク。*Note multi mark::を参照のこと。




File: mew.jis.info, Node: Refile, Next: by-folder, Prev: mew-mark, Up: Top

楽々整理整頓
************

1日に数百のメッセージを受け取るようになると整理整頓が大変になります(え、
そんなに受け取らないですって？ 幸せですね :) 。Mew では、`o' でメッセー
ジを整頓する際に、整頓先を推測しデフォルト値として表示してくれます。たと
えば、次のようになります。

     Folder name (+work/mew-dist): +

もし、() の中のデフォルト値が自分の希望通りであれば、`RET' を押すだけで
よいのです。整頓先が決定しているメッセージには、`o' マークが付きます。

メッセージを移動できるのは、そのメッセージが属している「世界」の中でのみ
です。前述のように世界はケースと修飾子によって定まります。整頓先のフォル
ダを指定する場合には、ケースを付けず、同じ修飾子を持つフォルダ名を入力す
る必要があります。ケースを付けない理由は、そのメッセージのケースはすでに
定まっているからです。ミニバッファからフォルダ名を入力する際、ケースが 
"default" でないにも関わらずケースを明示的に入力しないのは、整頓先を指定
する場合のみです。

`o' に似たコマンドに `c' があります。両者の違いは、*Note refile mark:: 
を参照して下さい。

この整頓先の推測が賢ければ賢い程ユーザは楽になります。Mew では以下のよう
な規則が用意されています。

* Menu:

* by-folder::                   メーリングリスト用のフォルダから推測
* by-alist::                    指定した規則から推測
* by-thread::                   対話関係から推測
* by-from-folder::              個人用のフォルダから推測
* by-from::                     From: から推測
* by-newsgroups::               Newsgroups: から推測
* by-default::                  デフォルトの規則
* guess-rule::                  規則の制御
* auto-refile::                 自動で整理整頓



File: mew.jis.info, Node: by-folder, Next: by-alist, Prev: Refile, Up: Refile

メーリングリスト用のフォルダから推測
====================================

あるメーリングリスト宛のメッセージを、そのメーリングリスト名のフォルダに
整理することは多いと思います。Mew ではメーリングリスト宛に届いたメッセー
ジに対して、それ用のフォルダを推測する機能があります。

たとえば、+misc/pooh-lovers というフォルダがあったとしましょう。次のよう
なメッセージは、このフォルダに整頓すればよい可能性が高いといえます。

     To: pooh-lovers@mew.org 

このように、To: や Cc: のアドレスが、フォルダ名の一番右側にマッチするも
のがないか探すわけです。フォルダを階層化していない人が多いようですが、
Mew を使う限り、階層化しない手はありません。

さて、鋭い人は次のように個人のアドレスが To: や Cc: にある場合、困るので
はないかと思うでしょう。

     To: piglet@mew.org
     Cc: pooh-lovers@mew.org

たとえば、pooh は pooh-lovers の一員ですから、このメッセージが届きます。
しかし、piglet と仲がいいので、+from/piglet にマッチしてしまいます。

そこで、Mew では無視するフォルダを設定できるようになっています。デフォル
トでは、+from 以下を無視します。ですから、個人からのメッセージは +from 
以下に収めて下さい

候補が決定できたら

     Folder name (+misc/pooh-lovers): +

と訊いてきます。あっていれば `RET' を、違っていればお望みのフォルダを入
力して下さい。

`o' で新しいフォルダを指定すると、そのフォルダが自動的に作成され、次から
は推測用の候補にも加わります。便利でしょ？

この機能を提供する関数は `mew-refile-guess-by-folder' です。

もし、フォルダ名に大文字を使っていないなら、以下の設定により、この関数が
高速になります。

     (setq mew-use-fast-refile t)



File: mew.jis.info, Node: by-alist, Next: by-thread, Prev: by-folder, Up: Refile

指定した規則から推測
====================

フォルダ名から推測する機能だけでは、思うようなフォルダを推測してくれない
場合があります。たとえば、To: が staff@mew.org であるメッセージと To: が 
staff@iijlab.net であるメッセージに対し、フォルダ名からの推測では同じフォ
ルダ(たとえば、"+net/staff")が選ばれてしまいます。そこで、Mew では、変数 
`mew-refile-guess-alist' に明示的に規則を設定できます。

1つ例を挙げてみましょう。

     (setq mew-refile-guess-alist
       '(("To:"
           ("staff@mew.org" . "+net/mew/staff")
           ("staff@iijlab.net" . "+net/iijlab/staff"))))

これは、メッセージヘッダ中の To: の横の文字列に staff@mew.org があれば 
+net/mew/staff へ、staff@iijlab.net があれば +net/iijlab/staff へ整頓す
るという意味です。

規則は、以下のように書きます。

     rule ::= '<rule>
     <rule> ::= ((<key> <alist>) (<key> <alist>) ... [<special>])

全体は (<key> <alist>) のリストです。<key> はフィールド名を書きます。
<alist> は以下のようになります。

     <alist> ::= (<value> . <folder>|<rule>) (<value> . <folder>|<rule>) ...

<value> は <key> で示したフィールドにくる値です。<folder> は <key> にマッ
チした際にどのフォルダに整頓するかを意味しています。<value> と <folder> 
を `.' で区切るのを忘れないで下さい。<folder> の代りに <rule> を再帰的に
記述することもできます。

特殊な <key> として `nil' と `t' があります。`nil' は、何も推測できなかっ
た場合に返す <folder> を指定するために用います。`t' は、推測した値に加え
て返す <folder> を指示するために使います。

     <special> ::= (t . <folder>) | (nil . <folder>)

正規表現を知っている人は、以下のような複雑な規則を設定できます。

     (setq mew-refile-guess-alist
       '(("Newsgroups:"
         ("^nifty\\.\\([^ ]+\\)" . "+Nifty/\\1")
         (".*"         . "+rec/news"))
        ("To:"
         ("\\(inet\\|wide\\)@wnoc-fuk" . "+wide/\\1-wnoc-fuk"))
        ("From:" 
         ("uucp@"      . "+adm/uucp")
         ("ftpsync@"   . "+adm/ftpsync"))
        (nil . "+unknown")))

この機能を提供する関数は `mew-refile-guess-by-alist' です。



File: mew.jis.info, Node: by-thread, Next: by-from-folder, Prev: by-alist, Up: Refile

対話関係から推測
================

Mew には、整頓しようとしているメッセージの親のメッセージが以前整頓された
フォルダを選択してくれる機能があります。

たとえば、pooh、piglet、roo との間で、蜂蜜を取りに行こうという話題が盛り
上がったとしましょう。pooh は、+project/honey というフォルダを作って、最
初のメッセージをそこに 整頓したとしましょう。以降、3人の間のメッセージが
きちんとした返答であるかぎり、+project/honey を推測してくれます。

あるメッセージをどこに保存したかという情報は、
"~/Mail/.mew-refile-msgid-alist" に保存されています。この情報を過去何通
のメッセージに関して保存するかは、`mew-lisp-max-length' で決定します。初
期値は 2000 通です。3000 通にしたい場合は "~/.mew.el" 中で以下のように設
定して下さい。

     (setq mew-lisp-max-length 3000)

この機能を提供する関数は `mew-refile-guess-by-thread' です。



File: mew.jis.info, Node: by-from-folder, Next: by-from, Prev: by-thread, Up: Refile

個人用のフォルダから推測
========================

*Note by-folder:: で説明したメーリングリスト用のフォルダを推測するに加え
て、個人用のフォルダを推測する機能があります。個人用のフォルダは +from 
以下にありますから、+from 以下のフォルダを選択する機能だともいえます。以
下の例を考えてみましょう。

     To: pooh@mew.org
     From: piglet@mew.org

piglet から pooh にメッセージが来ました。pooh がこの機能を使うと、From: 
を手がかりに +from/piglet が選択されます。(+from 以下は階層化されていて
も構いません。また、フォルダ名はユーザ名だけではなくアドレス全体でも OK 
です。)

この機能を提供する関数は、`mew-refile-guess-by-from-folder' といいます。

次に、pooh が piglet に返答した場合を考えましょう。pooh は自分自身に Cc: 
していたので、自分にメッセージが戻ってきました。

     To: piglet@mew.org
     Cc: pooh@mew.org
     From: pooh@mew.org

pooh の立場になって考えてみて下さい。このメッセージを +from/pooh に整頓
するか、あるいは +from/piglet に整頓するのかは、好みが分かれるところでしょ
う。そこで、どちらを選択するのかカスタマイズできるようになっています。

`mew-refile-guess-from-me-is-special' が `t' なら、
`mew-refile-guess-by-from-folder' は、From: が自分のアドレスの場合に、
To: と Cc: にあるアドレスをもとに、+from 以下のフォルダを選択します。



File: mew.jis.info, Node: by-from, Next: by-newsgroups, Prev: by-from-folder, Up: Refile

From: から推測
==============

From: に同一のアドレスを持つメッセージが、かつてどこに整頓されたかによっ
て推測する機能があります。

たとえば、piglet は piglet@beech.tree.uk と p-p-p@mew.org の 2 つのアド
レスを持っているとしましょう。どちらのアドレスからメッセージが届いても、
pooh はそれらを +from/piglet に整頓したいと思っています。もちろん、以下
のように明示的に規則を書けば実現できます。

     (setq  mew-refile-guess-alist
       '(("From:"
           ("piglet@beech.tree.uk" . "+from/piglet")
           ("p-p-p@mew.org"        . "+from/piglet"))))

しかし、いちいち規則を書くのは面倒です。そこで、まず From: が 
piglet@beech.tree.uk であるメッセージを +from/piglet に整頓します。これ
でフォルダ +from/piglet が作成されます。次に、From: が p-p-p@mew.org で
あるメッセージを +from/piglet に整頓したとします。ここで Mew は、
p-p-p@mew.org が +from/piglet に整頓されたことを学習します。以後 From: 
が p-p-p@mew.org であるメッセージを整頓しようとすると、+from/piglet を選
択するようになります。

その他、機械からくるメッセージは、いつも +adm/misc に入れることにしたい
場合なども、明示的な規則を書かずに済ませられます。

From: とフォルダの情報は、"~/Mail/.mew-refile-from-alist" に保存されてい
ます。この情報を過去何通のメッセージに関して保存するかは、*Note
by-thread:: と同様に `mew-lisp-max-length' で決定します。

この機能を提供する関数は `mew-refile-guess-by-from' です。

`mew-refile-guess-from-me-is-special' が `t' の場合、
`mew-refile-guess-by-from' は `mew-refile-guess-by-from-folder'(*Note
by-from-folder::)と同様な動きをします。



File: mew.jis.info, Node: by-newsgroups, Next: by-default, Prev: by-from, Up: Refile

Newsgroups: から推測
====================

ニュースをメールとして受信して Mew で読んでいる人のために、Newsgroups: 
からフォルダを推測する機能を用意しました。関数名は 
`mew-refile-guess-by-newsgroups' です。



File: mew.jis.info, Node: by-default, Next: guess-rule, Prev: by-newsgroups, Up: Refile

デフォルトの規則
================

デフォルトの規則は、From: からユーザ名を切り出して、`+from/user' を選ぶ
ようになっています。ただし、`mew-refile-guess-strip-domainpart' が `nil' 
ならアドレスを切り出すので、`+from/user@domain' が選択されます。

関数名は、`mew-refile-guess-by-default' です。



File: mew.jis.info, Node: guess-rule, Next: auto-refile, Prev: by-default, Up: Refile

規則の制御
==========

Mew では、フォルダ推測の規則を2つの変数、`mew-refile-guess-control' と 
`mew-refile-ctrl-multi' で制御します。`mew-refile-guess-control' は、呼
び出す関数を順に定義します。候補を複数にしたい場合は 
`mew-refile-ctrl-multi' を `t' に、単数にしたい場合は `nil' に設定します。

標準では、`mew-refile-guess-control' は以下のように宣言されています(宣言
なので `defvar' が使われています)。

     (defvar mew-refile-guess-control
       '(mew-refile-guess-by-alist
         mew-refile-ctrl-throw
         mew-refile-guess-by-newsgroups
         mew-refile-guess-by-folder
         mew-refile-ctrl-throw
         mew-refile-ctrl-auto-boundary
         mew-refile-guess-by-thread
         mew-refile-ctrl-throw
         mew-refile-guess-by-from-folder
         mew-refile-ctrl-throw
         mew-refile-guess-by-from
         mew-refile-ctrl-throw
         mew-refile-guess-by-default))

Mew は `mew-refile-guess-control' に並べられた関数を順番にすべて実行しま
す。各々の関数が複数の候補を推測することがあります。

`mew-refile-guess-control' の動作例として以下を考えてみましょう。

`mew-refile-guess-by-alist'
         が +aaa, +bbb を推測。
`mew-refile-guess-by-folder'
         が +ccc, +ddd を推測。
`mew-refile-guess-by-default'
         が +eee を推測。

+aaa 〜 +eee すべてをユーザに提示して欲しい場合は、
`mew-refile-ctrl-multi' を `t' に, +aaa だけを提示して欲しい場合は、
`nil' に設定します。

また、+aaa 〜 +ddd は提示して欲しいけれどもそれ以降はいらない、つまり、
+eee を提示するのは先に実行された関数群が何も推測できなかったときだけに
したい場合は、`mew-refile-ctrl-multi' を `t' にして、
`mew-refile-guess-by-folder' と `mew-refile-guess-by-default' の間に 
`mew-refile-ctrl-throw' を入れて下さい。

`C-uo' は、この推測の流れを Message バッファに表示します。



File: mew.jis.info, Node: auto-refile, Next: Pick, Prev: guess-rule, Up: Refile

自動で整理整頓
==============

毎日メッセージをたくさんもらう人は、まだ整頓していないメッセージを 
+inbox (あるいは %inbox) フォルダに大量に溜めてしまうことがあります。そ
んなときは、「メッセージ達よ、とにかくこのフォルダからどこかに行ってしま
え」と叫びたくなることがあるでしょう。Mew は、そんなわがままなを満足させ
るための自動整理整頓関数を提供しています。:) `M-o' がその呪文です。

この関数を実行すると、現在のフォルダ内の特定のメッセージに対して、自動的
に `o' マークを付けてくれます。特定のメッセージとは、
`mew-refile-auto-refile-skip-any-mark' が `nil'なら、`o' や `D' マークが
付いていないメッセージです。`mew-refile-auto-refile-skip-any-mark' が 
`t' なら、なにもマークが付いてないメッセージです。
`mew-refile-auto-refile-skip-any-mark' の初期値は `nil' です。

`C-uM-o' は、`mew-refile-auto-refile-skip-any-mark' の値とは関係なく `*' 
マークの付いたメッセージを対象にします。

整頓先の決定には、先に説明した推測関数群が働くようになっています。この関
数は、`o' を付けるだけですので、`x' を押さない限り実際にメッセージがどこ
かに行ってしまうことはありません。

Mew の整頓先推測はあまりにも賢すぎるので、この機能には仇となってしまいま
す。というのは、Mew が推測機能をフルに使って勝手に整頓してしまうと、大抵
のユーザはどこにメッセージが整頓されたか分からなくなってしまうのからで
す。:) そのために、Mew が使う推測関数を制限する機能が提供されています。
前に出てきた宣言をもう一度思い出して下さい。

     (defvar mew-refile-guess-control
       '(mew-refile-guess-by-alist
         mew-refile-ctrl-throw
         mew-refile-guess-by-newsgroups
         mew-refile-guess-by-folder
         mew-refile-ctrl-throw
         mew-refile-ctrl-auto-boundary
         mew-refile-guess-by-thread
         mew-refile-ctrl-throw
         mew-refile-guess-by-from-folder
         mew-refile-ctrl-throw
         mew-refile-guess-by-from
         mew-refile-ctrl-throw
         mew-refile-guess-by-default))

`mew-refile-guess-control' の中に `mew-refile-ctrl-auto-boundary' という
関数があります。これがその仕掛です。自動整理整頓のときに限り、Mew はこの
関数より下に記述してある推測を無視します。
`mew-refile-ctrl-auto-boundary' より上に記述している関数が何も推測できな
かった場合は、そのメッセージには `o' が付きません。破滅が訪れる前に 
`mew-refile-ctrl-auto-boundary' の御札を貼って下さい。




File: mew.jis.info, Node: Pick, Next: condition, Prev: auto-refile, Up: Top

メッセージの選択
****************

たとえば、Subject: に party という文字が含まれているメッセージを見つけ出
したり、From: が kazu@mew.org であるメッセージを選択したいと思うことがあ
ります。このように、入力した条件にあるメッセージを見つけ出すコマンドを 
Mew は 2 つ提供しています。

`?'
     入力した条件に合うメッセージに `*' マークを付ける。現在の Summary 
     モードの一覧を利用する。`?' を押した後に、条件を入力。
`/'
     複数のフォルダから入力した条件に合うメッセージを見つけ出して 
     Virtual モードに一覧表示する。

これらのコマンドは、mewls を利用してメッセージを選択します。mewls が調べ
るのはヘッダのみです。あるキーワードが本文に存在するメッセージを選びたい
場合は他の外部コマンド(デフォルトは "grep")を利用する必要があります。
`C-u?' と `C-u/' を利用すると、mewls の代わりに、他の外部コマンドを呼び
出します。

また条件を入力せずに、マークのメッセージに対して Virtual モードを作るコ
マンドがあります。

`m/'
     `*' マークの付いたメッセージに対し、Virtual モードを作成する。

以下条件の入力方法と Virtual モードに付いて解説します。

* Menu:

* condition::                   条件の入力方法
* virtual::                     Virtual モード



File: mew.jis.info, Node: condition, Next: virtual, Prev: Pick, Up: Pick

条件の入力方法
==============

Mew が条件の入力をユーザに促すときは以下のように訊いてきます。

     Pick pattern: 

以下に示す式を組み合わせて条件を入力して下さい。(結合力の強い順に並んで
います。)

`field=string'
     フィールド field に文字列 string が含まれているときマッチ(大文字小
     文字を区別しない)。field に "head" を指定した場合は、ヘッダ全体を意
     味する。
`field==string'
     フィールド field に文字列 string が含まれているときマッチ(大文字小
     文字を区別する)。field に "head" を指定した場合は、ヘッダ全体を意味
     する。
`field!=string'
     フィールド field に文字列 string が含まれていないときマッチ(大文字
     小文字を区別しない)。field に "head" を指定した場合は、ヘッダ全体を
     意味する。
`field!==string'
     フィールド field に文字列 string が含まれていないときマッチ(大文字
     小文字を区別する)。field に "head" を指定した場合は、ヘッダ全体を意
     味する。
`( <pattern> )'
     <pattern> の内容を先に評価。
`! <pattern>'
     <pattern> でないときマッチ。
`<pattern1> & <pattern2>'
     <pattern1> かつ <pattern2> のときマッチ。
`<pattern1> | <pattern2>'
     <pattern1> または <pattern2> のときマッチ。

以下に例を示します。

(a) From: に kazu が含まれるメッセージ

     from=kazu

(b) To: が mew、または、Cc: が mew であるメッセージ

     to=mew | cc=mew

(c) To: が mew、または、Cc: が mew で、かつ、from が kazu であるメッセー
ジ

     (to=mew | cc=mew) & from=kazu

後は類推して下さい。


あるキーワードがヘッダと本文のどこかに含まれているメッセージを選択したい
場合は、`C-u?' や `C-u/' を実行し、外部コマンドを起動します。この場合、
以下のように訊かれます。

     Grep pattern: 

ここでは単純にキーワードを入力して下さい。(上記の式を入力するのではあり
ません。) なお、検索したキーワード付近を表示するには、`M-n' や `M-p' を
使うと便利です(*Note review mark:: を参照)。



File: mew.jis.info, Node: virtual, Next: Quit, Prev: condition, Up: Pick

Virtual モード
==============

Virtual モードは、複数のフォルダから入力した条件に合うメッセージを選びだ
し、単一の仮想的なフォルダとして扱います。Summary モードで `/' を押すと、
Virtual モードが作れます。

最初に、単数または複数のフォルダ名を入力します。複数のフォルダを入力する
場合は、"," で区切って下さい。もちろん、`TAB' で補完できます。

     Folder name (+inbox) : +inbox,+mew

この例では、Virtual モードのフォルダ名は "*+inbox,+mew*" になります。

そして、条件を入力します。

     Pick pattern: 

すると仮想フォルダができあがります。Summary モードで利用できるコマンドの
多くが、Virtual モードで利用できます。仮想フォルダはまさしく仮想であり、
ファイルシステムなどには存在しないことに注意して下さい。Emacs を終了する
と、仮想フォルダはなくなります。

Virtual モードであるメッセージにマークを付けると、Summary モードの対応す
るメッセージにもマークが付きます。逆に、Summary モードであるメッセージに
マークを付けても、Virtual モードの対応するメッセージにはマークは付きませ
ん。

Virtual モードからマークを処理することはできません。`x' を押しマークを処
理しようとすると、Summary モードに移動しろという促されます。また、スレッ
ドのための Virtual モードで `x' を押すと、対応する Summary モードに移動
し、もう一度 `x' を押すよう促されます。


Virtual モードを消去する方法については、*Note Quit::を参照して下さい。




File: mew.jis.info, Node: Quit, Next: Customize, Prev: virtual, Up: Top

一休み
******

Mew を終了させたり、一時中断させたり、そのモード(正確にはバッファ)を消去
する方法を以下に示します。

<Summary モードと Virtual モード>

`q'
     Mew を一時中断し、他のバッファに切り替える。Mew 用のバッファはすべ
     て残っているので、バッファ操作で選べば再開できる。
`Q'
     Mew を終了。Mew が使ったすべてのバッファを消去する。
`C-cC-q'
     そのモード(正確にはバッファ)を消去する。

<Draft モードと Header モード>

`C-cC-q'
     その草稿を消去する。

<Addrbook モード>

`C-cC-q'
     そのバッファを消去する。




File: mew.jis.info, Node: Customize, Next: summary-mode, Prev: Quit, Up: Top

カスタマイズ
************

ここでは、Mew のデフォルトの動作を変更し、自分好みの Mew にする方法を説
明します。主に "~/.mew.el" で設定して下さい。

* Menu:

* summary-mode::                Summary mode
* message-mode::                Message mode
* draft-mode::                  Draft mode
* charset::                     文字コード
* highlight::                   色付け
* hooks::                       フック
* pop:: 			POP
* imap::                        IMAP
* nntp::                        NNTP
* smtp::			SMTP
* config::                      送受信の動作変化
* custom-misc::                 その他



File: mew.jis.info, Node: summary-mode, Next: message-mode, Prev: Customize, Up: Customize

Summary mode
============

Summary モードの書式は、`mew-scan-form' で指定できます。以下にデフォルト
の値を示します。

     '(type (5 date) " " (14 from) " " t (0 subj))

このように、`mew-scan-form' は、リスト、シンボル、文字列のリストです。

  1. 文字列はそのまま出力される
  2. リストは、整数とシンボルから構成される。シンボルは、呼び出す関数を
     意味する。関数名は、"mew-scan-form-" とシンボル名を連結することで作
     られる。(例：' date というシンボルは、`mew-scan-form-date' という関
     数名になる) あらかじめ定義されているシンボルには、'type、'time、'
     date、'year、'size、' from、'subj がある。詳細は、
     `mew-scan-form-<symbol>' という名を持つ関数の説明を参照のこと。整数
     は、関数が返す文字列が埋めるフィールドの幅を指定する。正の数は、左
     詰めを意味する。負の数は、右詰めを意味する。もし、負の数を指定する
     場合、対応する関数は ASCII 文字列を返す必要がある。0 は、行の残りを
     意味し、左詰めとなる。
  3. `t' 以外のシンボルは、(1 シンボル) に等しい。
  4. もし、`mew-scan-form' の最初の要素が整数 N であれば、この整数は 
     '((N num) mark) に変換される。そうでなければ、'((-5 num) mark) が、
     `mew-scan-form' の前に付け加えられる。ユーザは、'num や 'mark とい
     うシンボルを `mew-scan-form' に使用してはならない。
  5. `t' は、スレッドの際に段付けする位置を意味する。

例を以下に示します。

     (setq mew-scan-form
           '(type (5 date) " " (-4 size) " " (14 from) " " t (0 subj)))

`mew-scan-form-from-me-prefix' は、自分から送信されたメッセージの宛先の
先頭に加えられる文字列です。初期値は "To:" です。

`mew-scan-form-extract-rule' は、From: フィールドからどの部分を切り出す
か指定するためのリストです。要素は、'name、'comment、'address、'nickname、
あるいは正規表現である必要があります。初期値は '(nickname) です。


次の例を考えて下さい。

     A: Kazu Yamamoto <kazu@mew.org>
     B: kazu@mew.org (Kazu Yamamoto)
     C: Kazuhiko Yamamoto (Kazu) <kazu@mew.org>

それぞの要素は、以下のような意味を持ちます。

  1. 'name:: 名前の部分
          A. Kazu Yamamoto
          B. (No match)
          C. Kazuhiko Yamamoto (Kazu)
  2. 'comment:: コメントの部分
          A: (No match)
          B: Kazu Yamamoto
          C: (Kazu)
  3. 'address:: アドレスの部分
          A: kazu@mew.org
          B: kazu@mew.org
          C: kazu@mew.org
  4. 'nickname:: `mew-addrbook-for-summary' の値に応じたアドレス帳の個人
     情報のある要素。`mew-addrbook-for-summary' の初期値は`'nickname' な
     ので、通常はニックネームに変換される。何が指定できるかは、*Note
     draft-mode:: を参照のこと。
  5. (regex):: 最初に合致した文字列

ある要素が合致しない場合、次の要素が評価されます。どの要素も From: フィー
ルドに合致しない場合か、この値が `nil' の場合、From: フィールド全体が利
用されます。


`mew-scan-form-mark-delete' が `t' の場合、重複しているメッセージに自動
的に `D' マークが付きます。初期値は `nil' です。

`mew-scan-form-mark-review' が `t' の場合、自分宛てのメッセージに自動的
に `*' マークが付きます。初期値は `nil' です。


いつも Emacs のフレーム全体で Mew を使いたい人は、以下の設定をして下さい。

     (setq mew-use-full-window t)


Summary モードの `SPC' は、`mew-summary-show-direction' によって、次のメッ
セージの表示の仕方が変わります。また同様に、強いマークを付けた後カーソル
が動く方向は `mew-summary-mark-direction' により指定できます。以下の値を
設定できます。

`up'
     上のメッセージを表示する。
`down'
     下のメッセージを表示する。
`next'
     読み進めている方向の次のメッセージを表示する。
`stop'
     次は表示しない。

両方とも初期値は `next' です。いつもメッセージを下から読む人は、以下のよ
うにすればよいでしょう。

     (setq mew-summary-show-direction 'up)



File: mew.jis.info, Node: message-mode, Next: draft-mode, Prev: summary-mode, Up: Customize

Message mode
============

Emacs がサポートしてないデータ型のファイルは、Message モードに直接表示で
きません。この場合、適切な外部アプリケーションがあれば、それを使って表示
可能です。Summary モードにおいて、パートの上で、`C-cC-e' と入力すると、
Message モードに指示された外部アプリケーションを起動し、そのパートを表示
できます。

Message モードで指示されたものではなく、他の外部アプリケーションを指定し
たい場合は、`C-cC-y' を使って下さい。また、データ型を指定し、そのデータ
型に応じた外部アプリケーションを起動したい場合は、`C-uC-cC-e' を利用して
下さい。

現在のメッセージやパートを生の書式で Message モードに表示するには、`,' 
を使って下さい。メッセージ全体をファイルとして開くには、`C-cTAB' を使い
ます。)


単に Mew をインストールした状態では、Text/Html を表示するには "mozilla" 
のような外部アプリケーションが必要です。この場合 Text/Html は、単にパー
トとして、あるいはメッセージの本文として扱われ、外部アプリケーションを起
動させる説明が Message モードに表示されています。それぞれ、パート、およ
びメッセージ上で、`C-cC-e' と入力すれば、外部アプリケーションに 
Text/Html を表示します。メッセージ上で `C-cC-e' と入力した場合は、(ヘッ
ダを除いて)本文のみが外部アプリケーションに渡されます。

利用する Text/Html 用の外部アプリケーションは、`mew-prog-text/html-ext' 
に指定します。以下は、"mozilla" に設定している例です。(必要であれば、ア
プリケーションの引数を `mew-prog-text/html-ext-arg' に設定して下さい。)

     (setq mew-prog-text/html-ext "mozilla")

"w3m" と "emacs-w3m" をインストールすると、Text/Html を Message モードに
表示できるようになります。(以下で説明する "wvHtml"、"xlhtml"、"ppthtml" 
は、単なる "w3m" ではなく、国際化された "w3m-m17n" が必要です。) 両者を
インストールしたら、"~/.mew.el" に以下の設定を加えて下さい。

     (condition-case nil
         (require 'mew-w3m)
       (file-error nil))

これで、あたかも Text/Plain であるかのように、Text/Html を Message モー
ドに表示できるようになります。この際も、`C-cC-e' の操作は有効です。

最近、Multipart/Alternative の中に Text/Plain と Text/Html の両方が入っ
ており、どちらかを選ぶようになっているメッセージを多く見掛けます。Mew は、
標準では Text/Plain の方を優先して表示します。"emacs-w3m" をインストール
すれば、Text/Html の方を優先したくなるかもしれません。その場合、以下の設
定を "~/.mew.el" に加えて下さい。(ここで *Note multipart:: を読み、`:' 
の使い方も思い出しておきましょう。)

     (setq mew-mime-multipart-alternative-list
           '("Text/Html" "Text/Plain" ".*"))


"wvHtml"、"xlhtml"、"ppthtml" というコマンドをインストールすれば、それぞ
れ WORD、Excel、PowerPoint ファイルのテキスト部分を、Message モードに表
示可能です。これらのコマンドは、HTML を利用するので、上記の Text/Html の
設定を完了させて下さい。また、UTF-8 (Unicode) を利用しますので、バージョ
ン 21.2 以前の Emacs には、Mule-UCS もインストールして下さい。

これで、たとえば WORD ファイルをあたかもテキストのように、Message モード
に表示可能になります。また、明示的に `C-cC-e' と入力しても、テキストとし
て Message モードに表示します。

ここで説明したコマンドなどの入手先は、"mew.dot.mew" を参照して下さい。



File: mew.jis.info, Node: draft-mode, Next: charset, Prev: message-mode, Up: Customize

Draft mode
==========

自分へ Cc: したい人は `mew-cc'を設定して下さい。返答の際には、対象のメッ
セージから、別途 Cc: が用意される場合があります。複数の Cc: がある場合、
送信時に 1 つにまとめられます。

バックアップのため、自分が送るメッセージを受け取りたいと考え、しかもヘッ
ダに自分のアドレスを残したくないなら、Dcc: を使って下さい。`mew-dcc' に
自分のアドレスを設定しましょう。

いつも入れて欲しいヘッダは、`mew-header-alist' に連想リスト形式で定義し
て下さい。以下に例を示します。

     (setq mew-header-alist
           '(("X-fingerprint:" . "6B 63 38 88 67 5E 96 8E  CE A4 62 73 3F 11 64 94")
             ("X-URL:" . "http://www.Mew.org/~kazu/")))

引用ラベルは、引用するフィールドを `mew-cite-fields'、ラベルの書式を 
`mew-cite-format' に定義します。引用記号は `mew-cite-prefix' に指定しま
す。デフォルトは、以下のようになっています。

     (defvar mew-cite-fields '("From:" "Subject:" "Date:"))
     (defvar mew-cite-format "From: %s\nSubject: %s\nDate: %s\n\n")
     (defvar mew-cite-prefix "> ")

引用ラベルに Message-ID: を加えるには以下のようにします。

     (setq mew-cite-fields '("From:" "Subject:" "Date:" "Message-ID:"))
     (setq mew-cite-format "From: %s\nSubject: %s\nDate: %s\nMessage-ID: %s\n\n")

引用記号にアドレスのユーザ部分が付くようにするには以下のようにします。

     (setq mew-cite-prefix-function (function mew-cite-prefix-username))

これで引用記号は以下のようになります。

     From: SUMIKAWA Munechika <sumikawa@ebina.hitachi.co.jp>
     Subject: Wine
     Date: Wed, 23 Jul 1997 11:40:50 +0900

     sumikawa> おはようからおやすみまでニートでおなじみの角川です。
     sumikawa> 
     sumikawa> さて、とろけるワイン作戦ですが、定石通り '89 のボルドーの
     sumikawa> カベルネ・ソービニョンを狙いたいと思います。

引用ラベルの From: の部分と、引用記号は、アドレス帳の個人情報の要素に変
換できます。それぞれ、`mew-addrbook-for-cite-label'、
`mew-addrbook-for-cite-prefix' で指定できます。初期値はそれぞれ `nil' と 
`'username' です。以下のような値が設定できます。

'shortname
     短縮名
'address
     アドレス
'username
     アドレスのユーザ部分
'nickname
     ニックネーム
'name
     正式な氏名

例として以下のような設定を考えてみましょう。

     (setq mew-addrbook-for-cite-label 'nickname)
     (setq mew-addrbook-for-cite-prefix 'nickname)

最初の設定でラベルの中のアドレスがニックネームに変わります。また、次の設
定で引用記号もニックネームに置き換わります。

     From: すみっち
     Subject: Wine
     Date: Wed, 23 Jul 1997 11:40:50 +0900

     すみっち> おはようからおやすみまでニートでおなじみの角川です。
     すみっち> 
     すみっち> さて、とろけるワイン作戦ですが、定石通り '89 のボルドーの
     すみっち> カベルネ・ソービニョンを狙いたいと思います。



File: mew.jis.info, Node: charset, Next: highlight, Prev: draft-mode, Up: Customize

文字コード
==========

*Note charset-guess:: で説明したように、Mew ではメッセージを作成する際に
適切な文字コードを自動的に選択します。

もし複数の言語の文字が混在しており、国際化された文字コードを選択する必要
がある場合は、`mew-charset-m17n' の値を利用します。初期値は、"utf-8"
(Unicode と理解してよい)です。"iso-2022-jp-2" にしたい人は、以下のように
設定するとよいでしょう。

     (setq mew-charset-m17n "iso-2022-jp-2")

メッセージを作成した際に、推測された文字コードを確認したい場合は、
`mew-ask-charset' を設定して下さい。

`nil'
     どのような文字コードが利用されても確認なし
`文字コードのリスト'
     このリストに存在しない文字コードが利用された場合に確認
`t'
     `mew-charset-m17n' が利用された場合に確認

たとえば、US-ASCII と ISO-2022-JP 以外の文字コードが選ばれた場合確認した
いのであれば、以下のように設定して下さい。

     (setq mew-ask-charset '("us-ascii" "iso-2022-jp"))

こう設定しているとき、たとえば "utf-8" が選択されると、以下のように訊か
れます。

     utf-8 is used. OK? (y or n) 

`y' を押すと、メッセージが送信されます(あるいは、キューに溜ります)。`n' 
を押すと、草稿が元の状態に戻ります。Typing `y' makes the composed
message sent (or queued). If you type `n', you will go back to the
original draft.

ヨーロッパでは、Latin 1 (ISO-8859-1) の代りに、ユーロ記号を含む Latin 9
(ISO-8859-15、通称 Latin 0) が使われ始めています。草稿に、Latin 1 の文字
と Latin 9 の文字が混在していると、以下の手順によって、文字コードが決定
されます。

  1. `unify-8859-on-decoding-mode' を利用している場合：
       1. ISO-8859-1 に収まるなら "iso-8859-1" を利用
       2. そうでないなら "utf-8" を利用
  2. `unify-8859-on-decoding-mode' を利用していない場合：
       1. ISO-8859-1 と ISO-8859-15 のどちらにも収まる場合、
          `mew-charset-latin' を利用
       2. ISO-8859-1 に収まるなら "iso-8859-1" を利用
       3. ISO-8859-15 に収まるなら "iso-8859-15" を利用
       4. そうでないなら、"utf-8" を利用

`mew-charset-latin' の初期値は、"iso-8859-15" です。"iso-8859-1" にした
い場合は、以下のように設定します。

     (setq mew-charset-latin "iso-8859-1")



File: mew.jis.info, Node: highlight, Next: hooks, Prev: charset, Up: Customize

色付け
======

`mew-use-highlight-mark' が `t' の場合、マークの付いたメッセージに色が付
きます。初期値は `t' です。

`mew-use-highlight-header' が `t' の場合、メッセージのヘッダに色が付きま
す。初期値は `t' です。

`mew-use-highlight-body' が `t' の場合、メッセージの本文に色が付きます。
初期値は `t' です。色を付ける上限は、`mew-highlight-body-max-size' で指
定できます。初期値は 10000 バイトです。

`mew-use-highlight-url' が `t' の場合、メッセージ中の URL に仕掛けが施さ
れて、マウスを持っていくと光るようになります。初期値は `t' です。

`mew-use-cursor-mark' が `t' の場合、Summary モードにおいて、現在表示し
ているメッセージの行頭に、`mew-cursor-mark' で指定された目印が付きます。
初期値は `nil' です。`mew-cursor-mark' の初期値は ">" です。

`mew-use-highlight-cursor-line' が `t' の場合、Summary モードでカーソル
のある行に下線が引かれます。初期値は `t' です。

`mew-use-highlight-mouse-line' が `t' の場合、Emacs がマウスの色付けをサ
ポートしていれば、Summary モードでマウスのある行に色がつきます。真中のボ
タンをクリックしながら、マウスだけでメッセージを読む際にはとても便利です。
初期値は `nil' になっています。

`mew-use-highlight-x-face' が `t' で、かつグラフィカル Emacs を使ってい
る場合、ヘッダ中の X-Face: が Message モードでアイコン化されます。グラフィ
カル Emacs での初期値は `t' です。



File: mew.jis.info, Node: hooks, Next: pop, Prev: highlight, Up: Customize

フック
======

Mew で用意されているフックをまとめます。

`mew-env-hook'
     Mew の起動時の環境が設定される前に評価される。
`mew-init-hook'
     Mew の起動時に評価される。
`mew-summary-mode-hook'
     Summary モードに入るときに評価される。
`mew-virtual-mode-hook'
     Virtual モードに入るときに評価される。
`mew-thread-display-hook'
     スレッドが表示された後に評価される。
`mew-header-mode-hook'
     Header モードに入るときに評価される。
`mew-draft-mode-hook'
     Draft モードに入るときに評価される。
`mew-draft-mode-newdraft-hook'
     新しい草稿が用意された際に、Draft モードにおいて評価される。
`mew-draft-mode-reedit-hook'
     +draft でないフォルダにある古い草稿を再編集した際に、Draft モードに
     おいて評価される。
`mew-draft-mode-reedit-draft-hook'
     +draft でないフォルダにある草稿を再編集した際に、Draft モードにおい
     て評価される。
`mew-draft-mode-reedit-queue-hook'
     +queue または +postq フォルダにあるメッセージを再編集した際に、
     Draft モードにおいて評価される。
`mew-draft-mode-edit-again-hook'
     古い形式で戻ってきたメッセージを再編集した際に、Draft モードにおい
     て評価される。
`mew-message-mode-hook'
     Message モードに入るときに評価される。
`mew-message-hook'
     メッセージが Message モードで表示される度に評価される。
`mew-make-message-hook'
     Draft モードで MIME メッセージを作る前、つまり `C-cC-m' の際の最初
     に評価される。例：(add-hook 'mew-make-message-hook 'ispell-message)
`mew-send-hook'
     メッセージを SMTP で送信/キューイングする前に評価される。メッセージ
     の最終形が作られる前に評価されることに注意。
`mew-post-hook'
     メッセージを NNTP で投稿/キューイングする前に評価される。メッセージ
     の最終形が作られる前に評価されることに注意。
`mew-real-send-hook'
     メッセージを SMTP で送信/キューイングする前に評価される。メッセージ
     の最終形が作られた後に評価されることに注意。
`mew-real-post-hook'
     メッセージを NNTP で送信/キューイングする前に評価される。メッセージ
     の最終形が作られた後に評価されることに注意。
`mew-smtp-flush-hook'
     +queue からメッセージが送信された後に評価される。
`mew-nntp2-flush-hook'
     +postq からメッセージが送信された後に評価される。
`mew-smtp-sentinel-hook'
     SMTP が終了する際に評価される。
`mew-nntp-sentinel-hook'
     受信用の NNTP が終了する際に評価される。
`mew-nntp2-sentinel-hook'
     送信用の NNTP が終了する際に評価される。
`mew-pop-sentinel-hook'
     POP が終了する際に評価される。
`mew-pop-sentinel-non-biff-hook'
     Biff ではない POP が終了する際に評価される。
`mew-imap-sentinel-hook'
     IMAP が終了する際に評価される。
`mew-imap-sentinel-non-biff-hook'
     Biff ではない IMAP が終了する際に評価される。
`mew-scan-sentinel-hook'
     Summary モードの `s' が終了する際に評価される。
`mew-summary-ls-no-scan-hook'
     Summary モードの `s' がフォルダの一覧を取らなかった場合に評価される。
`mew-summary-exec-hook'
     Summary モードの `x' の実行が終了する際に評価される。
`mew-sort-hook'
     Summary モードの `S' の実行が終了する際に評価される。
`mew-pack-hook'
     Summary モードの `O' の実行が終了する際に評価される。
`mew-summary-toggle-disp-msg-hook'
     Summary モードの `v' の実行が終了する際に評価される。
`mew-syntax-format-hook'
     マルチパートの書式を作成する関数 `mew-syntax-format' が呼ばれた際に
     評価される。
`mew-addrbook-mode-hook'
     アドレス帳の登録モードに入るときに評価される。
`mew-cite-hook'
     Draft モードで引用する際に呼ばれる。通常 supercite を設定するために
     使う。
`mew-before-cite-hook'
     Draft モードでメッセージを引用する直前に呼ばれる。
`mew-suspend-hook'
     Mew を一時中断した際に評価される。
`mew-quit-hook'
     Mew の終了時に評価される。

以下にフックの設定例を示します。

Draft モードでは、フックを `text-mode-hook'、`mew-draft-mode-hook' の順
で評価します。`text-mode-hook' で `auto-fill-mode' を設定していない人は、 
`mew-draft-mode-hook' を以下のように設定するのがよいかもしれません。

     (setq mew-draft-mode-hook (function (lambda () (auto-fill-mode 1))))



File: mew.jis.info, Node: pop, Next: imap, Prev: hooks, Up: Customize

POP
===

Mew では、メッセージを受信する際に POP を利用できます。ここでは、POP を
制御するための以下の変数についてまとめます。

`mew-pop-server'
     POP サーバの名前。
`mew-pop-ssh-server'
     POP を SSH 経由で取得する場合の SSH サーバの名前。
`mew-pop-ssl'
     POP over SSL を使うか否か。
`mew-pop-ssl-port'
     POP over SSL のポート番号。
`mew-pop-user'
     POP のアカウント名。初期値はログイン名。
`mew-pop-auth'
     POP の認証方式。`'pass' は USER/PASS (生パスワード)、`'apop' は 
     APOP、`t' は `mew-pop-auth-list' に従った SASL を意味する。初期値は 
     `'apop'。
`mew-pop-auth-list'
     SASL で利用する認証方式のリスト。優先順位の高い順に並べる。現在、
     "CRAM-MD5" が利用可能。
`mew-pop-delete'
     POP サーバからメッセージを取得後、POP サーバにあるメッセージを削除
     するか否か。`t' なら削除。`nil' なら削除しない。数値 N なら、最初の
     アクセスから N 日後に削除する。初期値は `t'。
`mew-pop-size'
     POP サーバから取得するメッセージの大きさの上限。初期値は 55296 バイ
     ト。0 に設定すると、上限なしの意味になり、すべてのメッセージを取得
     する。上限に引っ掛かったメッセージの全体を取得する方法については、
     *Note retrieving:: を参照のこと。
`mew-pop-body-lines'
     大きさの上限にひっかかったメッセージの本文を何行取得するかという値。
     デフォルトは40。
`mew-pop-header-only'
     POP でメッセージを取得する際に、ヘッダのみにするか、本文も取得する
     か。`nil' でなければ、ヘッダのみを取得。デフォルトは `nil'。



File: mew.jis.info, Node: imap, Next: nntp, Prev: pop, Up: Customize

IMAP
====

Mew では、メッセージを受信する際に IMAP を利用できます。ここでは、IMAP 
を制御するための以下の変数についてまとめます。

`mew-imap-server'
     IMAP サーバの名前。
`mew-imap-ssh-server'
     IMAP を SSH 経由で取得する場合の SSH サーバの名前。
`mew-imap-ssl'
     IMAP over SSL を使うか否か。
`mew-imap-ssl-port'
     IMAP over SSL のポート番号。
`mew-imap-user'
     IMAP のアカウント名。初期値はログイン名。
`mew-imap-auth'
     IMAP の認証方式。`nil' は LOGIN (生パスワード)、`t' は 
     `mew-imap-auth-list' に基づいた SASL 意味する。初期値は `t'。
`mew-imap-auth-list'
     SASL で利用する認証方式のリスト。優先順位の高い順に並べる。現在、
     "CRAM-MD5" と "LOGIN" が利用可能。
`mew-imap-delete'
     IMAP サーバからメッセージを取得後、IMAP サーバにあるメッセージを削
     除するか否か。`t' なら削除。`nil' なら削除しない。数値 N なら、最初
     のアクセスから N 日後に削除する。初期値は `t'。
`mew-imap-size'
     IMAP サーバから取得するメッセージの大きさの上限。初期値は 55296 バ
     イト。0 に設定すると、上限なしの意味になり、すべてのメッセージを取
     得する。上限に引っ掛かったメッセージの全体を取得する方法については、
     *Note retrieving:: を参照のこと。
`mew-imap-header-only'
     IMAP でメッセージを取得する際に、ヘッダのみにするか、本文も取得する
     か。`nil' でなければ、ヘッダのみを取得。デフォルトは `nil'。



File: mew.jis.info, Node: nntp, Next: smtp, Prev: imap, Up: Customize

NNTP
====

Mew では、ニュースを読み書きする際に NNTP を利用します。ここでは、NNTP 
を制御するための以下の変数についてまとめます。

`mew-nntp-server'
     NNTP サーバの名前。
`mew-nntp-ssh-server'
     NNTP を SSH 経由で取得する場合の SSH サーバの名前。
`mew-nntp-ssl'
     NNTP over SSL を使うか否か。
`mew-nntp-ssl-port'
     NNTP over SSL のポート番号。
`mew-nntp-user'
     NNTP のアカウント名。もし `nil' でなければ、認証の手続きが実行され
     る。
`mew-nntp-newsgroup'
     デフォルトのニュースグループ名。
`mew-nntp-size'
     NNTP サーバから取得するメッセージの大きさの上限。初期値は 55296 バ
     イト。0 に設定すると、上限なしの意味になり、すべてのメッセージを取
     得する。上限に引っ掛かったメッセージの全体を取得する方法については、
     *Note retrieving:: を参照のこと。
`mew-nntp-header-only'
     NNTP でメッセージを取得する際に、ヘッダのみにするか、本文も取得する
     か。`nil' でなければ、ヘッダのみを取得。デフォルトは `nil'。
`mew-nntp-msgid-user'
     Message-Id: を作成するためのユーザ名。`nil' であれば `mew-user' の
     値が利用される。初期値は `nil'。Message-Id: の書式は以下を参照。
`mew-nntp-msgid-domain'
     Message-Id: を作成するためのドメイン名。`nil' であれば 
     `mew-mail-domain' の値が利用される。初期値は `nil'。Message-Id: の
     書式は以下を参照。

なお、NNTP 用の Message-Id: の値は以下のように作成されます。

     message-id = *random*.nntp-msgid-user@nntp-msgid-domain



File: mew.jis.info, Node: smtp, Next: config, Prev: nntp, Up: Customize

SMTP
====

Mew では、メッセージを送信する際に SMTP を利用します。ここでは、SMTP を
制御するための以下の変数についてまとめます。

`mew-smtp-server'
     SMTP サーバの名前。
`mew-smtp-ssh-server'
     SSH 経由でメッセージを送る際の SSH サーバの名前。
`mew-smtp-ssl'
     SMTP over SSL を使うか否か。
`mew-smtp-ssl-port'
     SMTP over SSL のポート番号。
`mew-smtp-user'
     SMTP AUTH で利用されるアカウント名。もし `nil' でなければ、認証の手
     続きが実行される。
`mew-smtp-auth-list'
     SMTP AUTH で利用する認証方式のリスト。優先順位の高い順に並べる。デ
     フォルトは、'("CRAM-MD5" "PLAIN" "LOGIN")。
`mew-smtp-helo-domain'
     SMTP HELO コマンドで使われるサーバ名。初期値は "localhost"。
`mew-smtp-mail-from'
     SMTP MAIL FROM コマンドで指定されるアドレス。`nil' の場合は、From: 
     フィールドのアドレスが指定される。初期値は `nil'。
`mew-smtp-msgid-user'
     Message-Id: を作成するためのユーザ名。`nil' であれば `mew-user' の
     値が利用される。初期値は `nil'。Message-Id: の書式は以下を参照。
`mew-smtp-msgid-domain'
     Message-Id: を作成するためのドメイン名。`nil' であれば 
     `mew-mail-domain' の値が利用される。初期値は `nil'。Message-Id: の
     書式は以下を参照。
`mew-use-8bit'
     8 ビットテキストを符号化せずにそのまま送るか否か。`nil'の場合は、適
     切な MIME 符号化が施される。初期値は `nil'。

なお、SMTP 用の Message-Id: の値は以下のように作成されます。

     message-id = *random*.smtp-msgid-user@smtp-msgid-domain



File: mew.jis.info, Node: config, Next: custom-misc, Prev: smtp, Up: Customize

送受信の動作変化
================

`mew-config-alist' を使うと、メッセージの送受信に関する動作に変化をつけ
られます。以下の設定例を使って説明します。

     (setq mew-config-alist
           '(("home"
              ("inbox-folder"   . "+inbox-home")
              ("pop-server"     . "pop.iij4u.or.jp"))
             ("ext"
              ("pop-ssh-server" . "ssh.mew.org"))
             ("default"
              ("proto"          . "%")
              ("imap-server"    . "imap.mew.org")
              ("pop-server"     . "pop.mew.org"))))

この例では、"home"、"ext"、"default" という 3 つのケースを定めています。
それぞれのケースに対して、いくつかのキーと値の対が設定されています。

この例を使って、`mew-config-alist'の意味を説明します。ケースを "home" に
して "pop-server" を索くと、"pop.iij4u.or.jp" が得られます。ケースを 
"ext" にして "pop-server" を索くと、"ext" には該当するキーがないので、
"default" を見て、"pop.mew.org" が得られます。ケースを "default" にして 
"pop-server" を索くと、"pop.mew.org" が得られます。

ケースを "home" にして "inbox-folder" を索くと、"+inbox-home" が得られま
す。ケースを "ext" にして "inbox-folder" を索くと、"ext" には該当するキー
がなく、さらに "default" にもないので、`mew-inbox-folder' という変数の値
が得られます。ケースを "default" にして "inbox-folder" を索いた場合も、
`mew-inbox-folder' の値が得られます。

"proto" (`mew-proto')は、`M-x mew' と入力された際に、どのフォルダに移動
するか指定するために使います。(Mew を起動するために `M-x mew' と入力する
場合、"default" ケースの "proto" が利用されます。Mew が起動している際に、
`M-x mew' と入力すると入力ケースに従って、"proto" が選ばれます。)

値の候補は、"+"、"$"、"%"、"-" です。これらは標準では、"+inbox"、
"$inbox"、"%inbox"、"-fj.mail.reader.mew" を意味します。

`mew-config-alist' で設定できるキーのほとんどは、`mew-"キー"' という変数
に対応しています。以下に設定できる項目を列挙します。

     "name", "user", "mail-domain", 
     "cc", "fcc", "dcc", "reply-to", "organization", "header-alist", 
     "mailbox-type", "mbox-command", "mbox-command-arg",
     "inbox-folder", "queue-folder", "postq-folder", 
     "signature-file", "content-type", 
     "smtp-server", "smtp-port", "smtp-ssh-server", 
     "smtp-ssl", "smtp-ssl-port", 
     "smtp-user", "smtp-auth-list", 
     "smtp-msgid-user", "smtp-msgid-domain", 
     "smtp-helo-domain", "smtp-mail-from", 
     "pop-server", "pop-port", "pop-ssh-server", 
     "pop-ssl", "pop-ssl-port", 
     "pop-user", "pop-auth", "pop-auth-list", 
     "pop-size", "pop-header-only", "pop-delete", "pop-body-lines",
     "imap-server", "imap-port", "imap-ssh-server", 
     "imap-ssl", "imap-ssl-port", 
     "imap-user", "imap-auth", "imap-auth-list", 
     "imap-size", "imap-delete", "imap-header-only", 
     "imap-queue-folder", 
     "nntp-server", "nntp-port", "nntp-ssh-server", 
     "nntp-ssl", "nntp-ssl-port", 
     "nntp-user", "nntp-size", "nntp-header-only", 
     "nntp-msgid-user", "nntp-msgid-domain", 
     "proto"

"name"、"user"、"mail-domain" は以下の規則にしたがって、From: の値になり
ます。

     from = name <user@mail-domain>

自分で `mew-from-list' を設定していない場合は、上記のルールに従い各ケー
スの from を集めて、`mew-from-list' が自動的に設定されます。*Note
cheader::を参照のこと。

`mew-config-alist' に設定したケースを、受信ケースと送信ケースに指定でき
ます。Mew の起動時は、受信ケースと送信ケース、ともに "default" になって
います。

Summary モードにおいて、受信ケースと送信ケースを変更するには `C' を利用
します。補完を用いてケースを入力できます。

`mew-case-synchronize' という変数を `nil' に設定すると、受信ケースと送信
ケースを独立に設定できるようになります。この場合、`C' が受信ケース用で、
`C-uC' が送信ケース用です。

いずれか一方、あるいは両方のケースが "default" 以外の値をとった場合は、
Summary モードのモードラインに表示されます。以下は受信ケース、送信ケース
がそれぞれ、"home"、"ext" となっている場合の例です。

     (Summary home:ext)


Draft モードでは、送信ケース "default" でない場合、モードラインにその値
が表示されます。以下は、送信ケースが "home" である場合の例です。

     (Draft home)

Draft モードにおいて、その草稿の送信ケースを変更するには、`C-cC-o' を用
います。"mail-domain" キーや "header-alist" キーに対応する値に応じて、ヘッ
ダが動的に変更されます。なお、この送信ケースは、その Draft モードに固有
になります。

Draft モードでは、送信ケースを自動的に設定することもできます。

`mew-case-guess-when-prepared'
     この変数が `t' の場合、草稿が用意されたときに、
     `mew-case-guess-alist' に従って送信ケースが設定される。初期値は `t'。
`mew-case-guess-when-composed'
     この変数が `t' の場合、メッセージが作成されたときに、
     `mew-case-guess-alist' に従って送信ケースが設定される。初期値は 
     `nil'
`mew-case-guess-when-replied'
     この変数が `t' の場合、返答によって草稿が用意されたときに、
     `mew-case-guess-when-replied-alist' に従って送信ケースが設定される。
     初期値は `t'。

`mew-case-guess-alist' と `mew-case-guess-when-replied-alist' の書式は、
`mew-refile-guess-alist' と同じです。詳しくは、*Note by-alist:: を参照し
て下さい。


以下にケースに関するコマンドをまとめます。

`C'
     Summary モードにおいて、ケースを設定する。`mew-case-synchronize' の
     値が `t' (初期値)なら、送信ケースと受信ケースを設定する。`nil' なら、
     受信ケースのみを設定する。
`C-uC'
     Summary モードにおいて、ケースを設定する。`mew-case-synchronize' の
     値が `t' なら、送信ケースと受信ケースを設定する。`nil'なら、送信ケー
     スのみを設定する。
`C-cC-o'
     Draft モードにおいて、その草稿の送信ケースを設定する。



